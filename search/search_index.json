{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sake Request","text":"<p>A set of utils to interogate file of Seqoia Data Lake</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install git+https://github.com/SeqOIA-IT/sake_request@0.1.0\n</code></pre> <p>You could check usage page for example</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at pierre.marijon-ext@aphp.fr. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd sake_request\nmake setup\n</code></pre> <p>Note</p> <p> If it fails for some reason, you'll need to install uv manually.</p> <p>You can install it with:</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>uv sync</code>.</p> <p>You now have the dependencies installed.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>The entry-point to run commands and tasks is the <code>make</code> Python script, located in the <code>scripts</code> directory. Try running <code>make</code> to show the available commands and tasks. The commands do not need the Python dependencies to be installed, while the tasks do. The cross-platform tasks are written in Python, thanks to duty.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build sake. Thank you!</p> <p>Python | uv | copier-uv</p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License colorama Cross-platform colored terminal text. <code>0.4.6</code> BSD License duckdb DuckDB in-process database <code>&gt;=1</code> <code>1.2.1</code> MIT polars Blazingly fast DataFrame library <code>&gt;=1</code> <code>1.26.0</code> MIT License pyarrow Python library for Apache Arrow <code>&gt;=7.0.0</code> <code>19.0.1</code> Apache Software License tqdm Fast, Extensible Progress Meter <code>&gt;=4</code> <code>4.67.1</code> MPL-2.0 AND MIT"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License ansimarkup Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License appdirs A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=1.4</code> <code>1.4.4</code> MIT babel Internationalization utilities <code>&gt;=2.7.0</code> <code>2.17.0</code> BSD-3-Clause backrefs A wrapper around re and regex that adds additional back references. <code>~=5.7.post1</code> <code>5.8</code> MIT build A simple, correct Python build frontend <code>&gt;=1</code> <code>1.2.2.post1</code> MIT License certifi Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2025.1.31</code> MPL-2.0 cffi Foreign Function Interface for Python calling C code. <code>&gt;=1.12</code> <code>1.17.1</code> MIT charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&gt;=2, &lt;4</code> <code>3.4.1</code> MIT click Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.1.8</code> BSD License colorama Cross-platform colored terminal text. <code>0.4.6</code> BSD License coverage Code coverage measurement for Python <code>&gt;=7.5</code> <code>7.7.1</code> Apache-2.0 cryptography cryptography is a package which provides cryptographic recipes and primitives to Python developers. <code>&gt;=2.0</code> <code>44.0.2</code> Apache-2.0 OR BSD-3-Clause csscompressor A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD docutils Docutils -- Python Documentation Utilities <code>&gt;=0.21.2</code> <code>0.21.2</code> Public Domain + Python Software Foundation License + BSD License + GNU General Public License (GPL) duty A simple task runner. <code>&gt;=1</code> <code>1.6.0</code> ISC editables Editable installations <code>&gt;=0.5</code> <code>0.5</code> MIT License execnet execnet: rapid multi-Python deployment <code>&gt;=2.1</code> <code>2.1.1</code> MIT failprint Run a command, print its output only if it fails. <code>&gt;=0.11, !=1.0.0</code> <code>1.0.3</code> ISC ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License git-changelog Automatic Changelog generator using Jinja2 templates. <code>&gt;=2</code> <code>2.5.3</code> ISC gitdb Git Object Database <code>&gt;=4.0.1, &lt;5</code> <code>4.0.12</code> BSD License GitPython GitPython is a Python library used to interact with Git repositories <code>&gt;=3.1.44</code> <code>3.1.44</code> BSD-3-Clause griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=1.6.2</code> <code>1.7.0</code> ISC htmlmin2 An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD id A tool for generating OIDC identities <code>1.5.0</code> Apache Software License idna Internationalized Domain Names in Applications (IDNA) <code>&gt;=2.5, &lt;4</code> <code>3.10</code> BSD License iniconfig brain-dead simple config-ini parsing <code>2.1.0</code> MIT jaraco.classes Utility functions for Python class constructs <code>3.4.0</code> MIT License jaraco.context Useful decorators and context managers <code>6.0.1</code> MIT License jaraco.functools Functools like those found in stdlib <code>4.1.0</code> MIT License jeepney Low-level, pure Python DBus protocol wrapper. <code>&gt;=0.4.2</code> <code>0.9.0</code> MIT Jinja2 A very fast and expressive template engine. <code>~=3.0</code> <code>3.1.6</code> BSD License jsmin JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License keyring Store and access your passwords safely. <code>&gt;=15.1</code> <code>25.6.0</code> MIT License Markdown Python implementation of John Gruber's Markdown. <code>&gt;=3.3.3</code> <code>3.7</code> BSD License markdown-callouts Markdown extension: a classier syntax for admonitions <code>&gt;=0.4</code> <code>0.4.0</code> MIT markdown-exec Utilities to execute code blocks in Markdown files. <code>&gt;=1</code> <code>1.10.3</code> ISC markdown-it-py Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0</code> <code>3.0.0</code> MIT License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=1.1</code> <code>3.0.2</code> BSD License mdurl Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License mergedeep A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License mkdocs Project documentation with Markdown. <code>&gt;=1</code> <code>1.6.1</code> BSD-2-Clause mkdocs-autorefs Automatically link across pages in MkDocs. <code>&gt;=1.4</code> <code>1.4.1</code> ISC mkdocs-coverage MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1</code> <code>1.1.0</code> ISC mkdocs-gen-files MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;=0.5</code> <code>0.5.0</code> MIT mkdocs-get-deps MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT mkdocs-git-revision-date-localized-plugin Mkdocs plugin that enables displaying the localized date of the last git modification of a markdown file. <code>&gt;=1</code> <code>1.4.5</code> MIT mkdocs-literate-nav MkDocs plugin to specify the navigation in Markdown instead of YAML <code>&gt;=0.6</code> <code>0.6.2</code> MIT mkdocs-material Documentation that simply works <code>&gt;=9</code> <code>9.6.9</code> MIT mkdocs-material-extensions Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT mkdocs-minify-plugin An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.8</code> <code>0.8.0</code> MIT mkdocstrings Automatic documentation from sources, for MkDocs. <code>&gt;=0.27</code> <code>0.29.0</code> ISC mkdocstrings-python A Python handler for mkdocstrings. <code>&gt;=1.16.2</code> <code>1.16.8</code> ISC more-itertools More routines for operating on iterables, beyond itertools <code>10.6.0</code> MIT License mypy Optional static typing for Python <code>&gt;=1</code> <code>1.15.0</code> MIT mypy-extensions Type system extensions for programs checked with the mypy type checker. <code>&gt;=1.0.0</code> <code>1.0.0</code> MIT License nh3 Python binding to Ammonia HTML sanitizer Rust crate <code>&gt;=0.2.14</code> <code>0.2.21</code> MIT packaging Core utilities for Python packages <code>24.2</code> Apache Software License + BSD License paginate Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.7</code> MIT pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=2.2.0</code> <code>4.3.7</code> MIT pluggy plugin and hook calling mechanisms for python <code>&gt;=1.5, &lt;2</code> <code>1.5.0</code> MIT ptyprocess Run a subprocess in a pseudo terminal <code>~=0.6</code> <code>0.7.0</code> ISC License (ISCL) pycparser C parser in Python <code>2.22</code> BSD-3-Clause Pygments Pygments is a syntax highlighting package written in Python. <code>~=2.16</code> <code>2.19.1</code> BSD-2-Clause pymdown-extensions Extension pack for Python Markdown. <code>~=10.2</code> <code>10.14.3</code> MIT pyproject_hooks Wrappers to call pyproject.toml-based build backend hooks. <code>1.2.0</code> MIT License pytest pytest: simple powerful testing with Python <code>&gt;=8</code> <code>8.3.5</code> MIT pytest-cov Pytest plugin for measuring coverage. <code>&gt;=6</code> <code>6.0.0</code> MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3</code> <code>3.16.0</code> MIT License pytest-xdist pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=3</code> <code>3.6.1</code> MIT License python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License pytz World timezone definitions, modern and historical <code>&gt;=2025.1</code> <code>2025.2</code> MIT PyYAML YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.2</code> MIT pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License readme_renderer readme_renderer is a library for rendering readme descriptions for Warehouse <code>&gt;=35.0</code> <code>44.0</code> Apache License, Version 2.0 requests Python HTTP for Humans. <code>~=2.26</code> <code>2.32.3</code> Apache-2.0 requests-toolbelt A utility belt for advanced users of python-requests <code>&gt;=0.8.0, !=0.9.0</code> <code>1.0.0</code> Apache 2.0 rfc3986 Validating URI References per RFC 3986 <code>&gt;=1.4.0</code> <code>2.0.0</code> Apache 2.0 rich Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=12.0.0</code> <code>13.9.4</code> MIT ruff An extremely fast Python linter and code formatter, written in Rust. <code>&gt;=0.9</code> <code>0.11.2</code> MIT SecretStorage Python bindings to FreeDesktop.org Secret Service API <code>&gt;=3.2</code> <code>3.3.3</code> BSD 3-Clause License semver Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.4</code> BSD License six Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.17.0</code> MIT smmap A pure Python implementation of a sliding window memory map manager <code>&gt;=3.0.1, &lt;6</code> <code>5.0.2</code> BSD-3-Clause twine Collection of utilities for publishing packages on PyPI <code>&gt;=6</code> <code>6.1.0</code> Apache Software License types-Markdown Typing stubs for Markdown <code>&gt;=3</code> <code>3.7.0.20250322</code> Apache-2.0 types-PyYAML Typing stubs for PyYAML <code>&gt;=6</code> <code>6.0.12.20250326</code> Apache-2.0 typing_extensions Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.1</code> <code>4.13.0</code> PSF-2.0 urllib3 HTTP library with thread-safe connection pooling, file post, and more. <code>&gt;=1.26.0</code> <code>2.3.0</code> MIT License watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>6.0.0</code> Apache-2.0"},{"location":"license/","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2024 Pierre Marijon\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"usage/","title":"Sake Request","text":"<p>Offers an object and some function to help user to interogate sake.</p> <p>It's a wrapper around duckdb and thriller functions, so if sake_request doesn't meet your needs, feel free to draw inspiration from it.</p>"},{"location":"usage/#create-request-object","title":"Create request object","text":"<pre><code>import pathlib\nimport sake\n\nsake_path = pathlib.Path(\"/path/to/your/sake\")\n\nsake_db = sake.Sake(sake_path)\n</code></pre> <p><code>sake_db</code> object store: - path usefull for sake request - number of thread could be use, by default it's set to value return by <code>os.cpu_count()</code> - if you want activate tqdm or not, by default not - an object <code>db</code> to store duckdb connection</p> <pre><code>sake_db = sake.Sake(\n    # mandatory argument\n    sake_path,\n    # optional argument\n    threads=3,\n    activate_tqdm=True,\n    # overwrite annotations_path\n    annotations_path=\"my_annotations\"\n)\n</code></pre> <p>This <code>sake_db</code> object use 3 thread, activate tqdm progress bar, and annotations path are <code>sake_path / \"my_annotations\"</code> instead of default value.</p>"},{"location":"usage/#get-variants-from-a-genomic-region","title":"Get variants from a genomic region","text":"<pre><code>df = sake_db.get_interval(\"germline\", 10, 329_034, 1_200_340)\n</code></pre> <p><code>df</code> is a polars.DataFrame you can make conversion to and from pandas with <code>to_pandas()</code> and <code>from_pandas()</code>. The result contains <code>chr</code>, <code>pos</code>, <code>ref</code> and <code>alt</code> column that are the minimum to define a variant and also a <code>id</code> it's a sake almost unique variants id.</p> <p>If you have multiple region you could run this: <pre><code>target_chrs = [\"1\", \"2\", \"3\"]\ntarget_start = [10_000, 40_232, 80_000]\ntarget_stop = [199_232, 50_123, 800_000]\n\ndf = sake_db.get_intervals(\n    \"germline\",\n    target_chrs,\n    target_start,\n    target_stop\n)\n</code></pre></p> <p>You can see <code>get_intervals</code> as just a loop of <code>get_interval</code>.</p>"},{"location":"usage/#get-variants-from-prescription","title":"Get variants from prescription","text":"<pre><code>df = sake_db.get_variant_of_prescription(\"AAAA\", \"germline\")\n</code></pre> <p>DataFrame contains all variants(id, chr, pos, \u2026) and genotype (gt, ad, \u2026) information of prescription AAAA in germline dataset.</p>"},{"location":"usage/#get-variants-from-an-annotations","title":"Get variants from an annotations","text":"<pre><code>df = sake_db.get_annotations(\"clinvar\", \"20241103\", \"germline\")\n</code></pre> <p>DataFrame contains all variants(id, chr, pos, \u2026) and annotations information. By default columns are rename with annotations name as prefix, add <code>rename_column=False</code> in call to change this behavior. If you want just some column use <code>select_columns</code> parameter, use original name without prefix.</p>"},{"location":"usage/#add-variants-to-a-dataframe","title":"Add variants to a dataframe","text":"<p>Your dataframe must contains <code>id</code> column (see variants).</p> <pre><code>df = sake_db.add_variants(df, \"germline\")\n</code></pre> <p>Now <code>df</code> store variants imformation: - chr: chromosome name - pos: position of variant - ref: reference sequence - alt: alternative sequence</p>"},{"location":"usage/#add-genotypes-to-variants","title":"Add genotypes to variants","text":"<p>Your dataframe must contains <code>id</code> column (see variants).</p> <pre><code>df = sake_db.add_genotypes(df, \"germline\")\n</code></pre> <p>Now <code>df</code> store variants with sample information and genotyping: - gt: number of 1 in GT column in vcf, phasing and . information are lose - ad: string that stop AD column in vcf - db: DP column in vcf - gq: GQ column in vcf</p> <pre><code>df = sake_db.add_genotypes(df, \"germline\", drop_column=[\"gq\"])\n</code></pre> <p>This df store not store <code>gq</code> column if you didn't need a column add it in drop_column.</p>"},{"location":"usage/#add-annotations","title":"Add annotations","text":"<pre><code>df = sake_db.add_annotations(df, \"gnomad\", \"3.1.2\")\n</code></pre> <p>By default all column in annotation are prefixed by annotation name. It's likely that not all columns are of interest to you, use parameter <code>select_columns</code> to list columns of interest. Use original name not with prefix.</p> <pre><code>df = sake_db.add_annotations(\n    df,\n    \"gnomad\",\n    \"genomes.4.1\",\n    rename_column=False,\n    select_columns=[\"AC\"]\n)\n</code></pre> <p>This call add to <code>df</code> a column AC from the gnomad annotations.</p>"},{"location":"usage/#special-case","title":"Special case","text":"<p>Due to some specificity in annotations path, you should add more information in <code>version``add_annotations</code> parameter.</p> <p>For exemple if you want add germline snpeff annotation you should run: <pre><code>df = sake_db.add_annotations(\n    df,\n    \"snpeff\", # database_name\n    \"germline/4.3t\", # database_version\n    select_columns=[\"effect\", \"impact\"]\n)\n</code></pre></p> <p>In fact <code>add_annotations</code> method just concat <code>sake</code> path, <code>database_name</code> and <code>database_version</code>. So to add annotations just check path like <code>{sake.path}/{database_name}/{database_version}</code> contains parquet file for each chromosome.</p>"},{"location":"usage/#add-sample-information","title":"Add sample information","text":"<p>Your data frame must contains <code>sample</code> column (see genotypes)</p> <pre><code>df = sake_db.sample_info(df)\n</code></pre> <p>You can select which column you want add in your dataframe</p> <pre><code>df = sake_db.sample_info(df, select_columns=[\"pid_crc\"])\n</code></pre> <p>Result only contains new <code>pid_crc</code> column.</p>"},{"location":"usage/#add-transmission-information","title":"Add transmission information","text":"<p>Transmission information are available only for germline information and for kindex sample. Your dataset must contains <code>pid_crc</code> column (see sample information)</p> <pre><code>index_transmission = sake_db.add_transmissions(df)\n</code></pre> <p>Result contains only variant of kindex sample with genotype column for index sample, father and mother with coresponding prefix and an origin column. More details in how origin column are build in variantplaner documentation.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> sake<ul> <li> abc</li> <li> dataclasses</li> <li> obj</li> <li> utils</li> </ul> </li> </ul>"},{"location":"reference/sake/","title":"sake","text":""},{"location":"reference/sake/#sake","title":"sake","text":"<p>Sake Request package.</p> <p>A set of utils tools to interogate Seqoia dAta laKE</p> <p>Modules:</p> <ul> <li> <code>abc</code>           \u2013            <p>Abstract Base Classes (ABCs) according to PEP 3119.</p> </li> <li> <code>dataclasses</code>           \u2013            </li> <li> <code>obj</code>           \u2013            <p>Define Sake dataclass.</p> </li> <li> <code>utils</code>           \u2013            <p>Some utils function.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>Sake</code>           \u2013            <p>Class that let user extract variants from sake.</p> </li> </ul>"},{"location":"reference/sake/#sake.Sake","title":"Sake  <code>dataclass</code>","text":"<pre><code>Sake(\n    *,\n    sake_path: Path,\n    target: str,\n    threads: int | None = cpu_count(),\n    activate_tqdm: bool | None = False,\n    aggregations_path: Path | None = None,\n    annotations_path: Path | None = None,\n    cnv_path: Path | None = None,\n    partitions_path: Path | None = None,\n    prescriptions_path: Path | None = None,\n    samples_path: Path | None = None,\n    str_path: Path | None = None,\n    transmissions_path: Path | None = None,\n    variants_path: Path | None = None,\n)\n</code></pre> <p>Class that let user extract variants from sake.</p> <p>Methods:</p> <ul> <li> <code>add_annotations</code>             \u2013              <p>Add annotations to variants.</p> </li> <li> <code>add_genotypes</code>             \u2013              <p>Add genotype information to variants DataFrame.</p> </li> <li> <code>add_sample_info</code>             \u2013              <p>Add sample information.</p> </li> <li> <code>add_transmissions</code>             \u2013              <p>Add transmissions information.</p> </li> <li> <code>add_variants</code>             \u2013              <p>Use id of column polars.DataFrame to get variant information.</p> </li> <li> <code>all_variants</code>             \u2013              <p>Get all variants of a target in present in Sake.</p> </li> <li> <code>get_annotations</code>             \u2013              <p>Get all variants of an annotations.</p> </li> <li> <code>get_interval</code>             \u2013              <p>Get variants from chromosome between start and stop.</p> </li> <li> <code>get_intervals</code>             \u2013              <p>Get variants in multiple intervals.</p> </li> <li> <code>get_variant_of_prescription</code>             \u2013              <p>Get all variants of a prescription.</p> </li> <li> <code>get_variant_of_prescriptions</code>             \u2013              <p>Get all variants of multiple prescriptions.</p> </li> </ul>"},{"location":"reference/sake/#sake.Sake.add_annotations","title":"add_annotations","text":"<pre><code>add_annotations(\n    variants: DataFrame,\n    name: str,\n    version: str,\n    *,\n    rename_column: bool = True,\n    select_columns: list[str] | None = None,\n) -&gt; DataFrame\n</code></pre> <p>Add annotations to variants.</p> <p>Require <code>id</code> column in variants value</p> Source code in <code>src/sake/obj.py</code> <pre><code>def add_annotations(\n    self,\n    variants: polars.DataFrame,\n    name: str,\n    version: str,\n    *,\n    rename_column: bool = True,\n    select_columns: list[str] | None = None,\n) -&gt; polars.DataFrame:\n    \"\"\"Add annotations to variants.\n\n    Require `id` column in variants value\n    \"\"\"\n    # annotations_path are set in __post_init__\n    annotation_path = self.annotations_path / f\"{name}\" / f\"{version}\"  # type: ignore[operator]\n\n    schema = polars.read_parquet_schema(annotation_path / \"1.parquet\")\n    if \"id\" in schema:\n        del schema[\"id\"]\n    columns = \",\".join([f\"a.{col}\" for col in schema if select_columns is None or col in select_columns])\n\n    all_annotations = []\n    iterator = sake._utils.wrap_iterator(\n        self.activate_tqdm,  # type: ignore[arg-type]\n        variants.group_by([\"chr\"]),\n        total=variants.get_column(\"chr\").unique().len(),\n    )\n\n    query = f\"\"\"\n    select\n        v.*, {columns}\n    from\n        _data as v\n    left join\n        read_parquet($path) as a\n    on\n        v.id == a.id\n    \"\"\"  # noqa: S608 we accept risk of sql inject\n\n    for (chrom, *_), _data in iterator:\n        if not (annotation_path / f\"{chrom}.parquet\").is_file():\n            continue\n\n        result = self.db.execute(\n            query,\n            {\n                \"path\": str(annotation_path / f\"{chrom}.parquet\"),\n            },\n        ).pl()\n\n        all_annotations.append(result)\n\n    result = polars.concat(all_annotations)\n\n    if rename_column:\n        result = result.rename(\n            {col: f\"{name}_{col}\" for col in schema if select_columns is None or col in select_columns},\n        )\n\n    return result\n</code></pre>"},{"location":"reference/sake/#sake.Sake.add_genotypes","title":"add_genotypes","text":"<pre><code>add_genotypes(\n    variants: DataFrame,\n    *,\n    keep_id_part: bool = False,\n    drop_column: list[str] | None = None,\n    number_of_bits: int = 8,\n    read_threads: int = 1,\n) -&gt; DataFrame\n</code></pre> <p>Add genotype information to variants DataFrame.</p> <p>Require <code>id</code> column in variants value</p> Source code in <code>src/sake/obj.py</code> <pre><code>def add_genotypes(\n    self,\n    variants: polars.DataFrame,\n    *,\n    keep_id_part: bool = False,\n    drop_column: list[str] | None = None,\n    number_of_bits: int = 8,\n    read_threads: int = 1,\n) -&gt; polars.DataFrame:\n    \"\"\"Add genotype information to variants DataFrame.\n\n    Require `id` column in variants value\n    \"\"\"\n    variants = sake.utils.add_id_part(variants, number_of_bits=number_of_bits)\n\n    if drop_column is None:\n        drop_column = []\n\n    if not keep_id_part:\n        drop_column.append(\"id_part\")\n\n    all_genotypes: list[polars.DataFrame | None] = []\n    iterator = sake._utils.wrap_iterator(\n        self.activate_tqdm,  # type: ignore[arg-type]\n        variants.group_by([\"id_part\"]),\n        total=variants.get_column(\"id_part\").unique().len(),\n    )\n\n    if read_threads == 1:\n        query = sake._utils.GenotypeQuery(self.threads, self.partitions_path, drop_column)  # type: ignore[arg-type]\n        all_genotypes = list(map(query, iterator))\n    else:\n        duckdb_threads = self.threads // read_threads  # type: ignore[operator]\n        query = sake._utils.GenotypeQuery(duckdb_threads, self.partitions_path, drop_column)  # type: ignore[arg-type]\n        self.db.query(f\"SET threads TO {duckdb_threads};\")\n\n        with multiprocessing.get_context(\"spawn\").Pool(processes=read_threads) as pool:\n            all_genotypes = list(pool.imap(query, iterator))\n\n        self.db.query(f\"SET threads TO {self.threads}\")\n\n    return polars.concat([df for df in all_genotypes if df is not None])\n</code></pre>"},{"location":"reference/sake/#sake.Sake.add_sample_info","title":"add_sample_info","text":"<pre><code>add_sample_info(\n    _variants: DataFrame,\n    *,\n    select_columns: list[str] | None = None,\n) -&gt; DataFrame\n</code></pre> <p>Add sample information.</p> <p>Required sample column in polars.DataFrame.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def add_sample_info(\n    self,\n    _variants: polars.DataFrame,\n    *,\n    select_columns: list[str] | None = None,\n) -&gt; polars.DataFrame:\n    \"\"\"Add sample information.\n\n    Required sample column in polars.DataFrame.\n    \"\"\"\n    # sampless_path are set in __post_init__\n    schema = polars.read_parquet_schema(self.samples_path)  # type: ignore[arg-type]\n\n    if select_columns is None:\n        select_columns = [col for col in schema if col != \"sample\"]\n\n    columns = \",\".join([f\"s.{col}\" for col in schema if col in select_columns])\n\n    query = f\"\"\"\n    select\n        v.*, {columns}\n    from\n        _variants as v\n    left join\n        read_parquet($path) as s\n    on\n        v.sample == s.sample\n    \"\"\"  # noqa: S608 we accept risk of sql inject\n\n    return self.db.execute(\n        query,\n        {\n            \"path\": str(self.samples_path),\n        },\n    ).pl()\n</code></pre>"},{"location":"reference/sake/#sake.Sake.add_transmissions","title":"add_transmissions","text":"<pre><code>add_transmissions(variants: DataFrame) -&gt; DataFrame\n</code></pre> <p>Add transmissions information.</p> <p>Required pid_crc column in polars.DataFrame.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def add_transmissions(\n    self,\n    variants: polars.DataFrame,\n) -&gt; polars.DataFrame:\n    \"\"\"Add transmissions information.\n\n    Required pid_crc column in polars.DataFrame.\n    \"\"\"\n    all_transmissions = []\n\n    input_columns = \",\".join([f\"v.{col}\" for col in variants.schema if col != \"id\"])\n\n    iterator = sake._utils.wrap_iterator(\n        self.activate_tqdm,  # type: ignore[arg-type]\n        variants.group_by([\"pid_crc\"]),\n        total=variants.get_column(\"pid_crc\").unique().len(),\n    )\n\n    query = f\"\"\"\n    select\n        {input_columns}, t.*\n    from\n        _data as v\n    left join\n        read_parquet($path) as t\n    on\n        v.id == t.id\n    where\n        v.kindex == True\n    \"\"\"  # noqa: S608 we accept risk of sql inject\n\n    for (pid_crc, *_), _data in iterator:\n        path = pathlib.Path(str(self.transmissions_path).format(target=\"germline\")) / f\"{pid_crc}.parquet\"\n\n        if not path.is_file():\n            continue\n\n        result = (\n            self.db.execute(\n                query,\n                {\n                    \"path\": str(path),\n                },\n            )\n            .pl()\n            .cast(\n                {\n                    \"father_gt\": polars.UInt8,\n                    \"mother_gt\": polars.UInt8,\n                    \"index_gt\": polars.UInt8,\n                    \"father_dp\": polars.UInt32,\n                    \"mother_dp\": polars.UInt32,\n                    \"father_gq\": polars.UInt32,\n                    \"mother_gq\": polars.UInt32,\n                },\n            )\n            .with_columns(\n                father_ad=polars.col(\"father_ad\").cast(polars.List(polars.String)).list.join(\",\"),\n                mother_ad=polars.col(\"mother_ad\").cast(polars.List(polars.String)).list.join(\",\"),\n                index_ad=polars.col(\"index_ad\").cast(polars.List(polars.String)).list.join(\",\"),\n            )\n        )\n\n        all_transmissions.append(result)\n\n    return polars.concat(all_transmissions)\n</code></pre>"},{"location":"reference/sake/#sake.Sake.add_variants","title":"add_variants","text":"<pre><code>add_variants(_data: DataFrame) -&gt; DataFrame\n</code></pre> <p>Use id of column polars.DataFrame to get variant information.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def add_variants(self, _data: polars.DataFrame) -&gt; polars.DataFrame:\n    \"\"\"Use id of column polars.DataFrame to get variant information.\"\"\"\n    query = \"\"\"\n    select\n        v.chr, v.pos, v.ref, v.alt, d.*\n    from\n        read_parquet($path) as v\n    join\n        _data as d\n    on\n        v.id == d.id\n    \"\"\"\n\n    return self.db.execute(\n        query,\n        {\n            \"path\": sake._utils.fix_variants_path(self.variants_path),  # type: ignore[arg-type]\n        },\n    ).pl()\n</code></pre>"},{"location":"reference/sake/#sake.Sake.all_variants","title":"all_variants","text":"<pre><code>all_variants() -&gt; DataFrame\n</code></pre> <p>Get all variants of a target in present in Sake.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def all_variants(self) -&gt; polars.DataFrame:\n    \"\"\"Get all variants of a target in present in Sake.\"\"\"\n    query = \"\"\"\n    select\n        v.id, v.chr, v.pos, v.ref, v.alt\n    from\n        read_parquet($path) as v\n    \"\"\"\n\n    return self.db.execute(\n        query,\n        {\n            \"path\": sake._utils.fix_variants_path(self.variants_path, None),  # type: ignore[arg-type]\n        },\n    ).pl()\n</code></pre>"},{"location":"reference/sake/#sake.Sake.get_annotations","title":"get_annotations","text":"<pre><code>get_annotations(\n    name: str,\n    version: str,\n    *,\n    rename_column: bool = True,\n    select_columns: list[str] | None = None,\n) -&gt; DataFrame\n</code></pre> <p>Get all variants of an annotations.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def get_annotations(\n    self,\n    name: str,\n    version: str,\n    *,\n    rename_column: bool = True,\n    select_columns: list[str] | None = None,\n) -&gt; polars.DataFrame:\n    \"\"\"Get all variants of an annotations.\"\"\"\n    annotation_path = self.annotations_path / f\"{name}\" / f\"{version}\"  # type: ignore[operator]\n\n    schema = polars.read_parquet_schema(annotation_path / \"1.parquet\")\n    chromosomes_list = [\n        entry.name.split(\".\")[0]\n        for entry in os.scandir(annotation_path)\n        if entry.is_file() and entry.name.endswith(\".parquet\")\n    ]\n\n    if \"id\" in schema:\n        del schema[\"id\"]\n        columns = \",\".join([f\"a.{col}\" for col in schema if select_columns is None or col in select_columns])\n\n    query = f\"\"\"\n    select\n        v.*, {columns}\n    from\n        read_parquet($annotation_path) as a\n    join\n        read_parquet($variant_path) as v\n    on\n        v.id = a.id\n    \"\"\"  # noqa: S608 we accept risk of sql inject\n\n    all_annotations = []\n    iterator = sake._utils.wrap_iterator(self.activate_tqdm, chromosomes_list)  # type: ignore[arg-type]\n    for chrom in iterator:\n        result = self.db.execute(\n            query,\n            {\n                \"annotation_path\": str(\n                    self.annotations_path / f\"{name}\" / f\"{version}\" / f\"{chrom}.parquet\",  # type: ignore[operator]\n                ),\n                \"variant_path\": sake._utils.fix_variants_path(self.variants_path),  # type: ignore[arg-type]\n            },\n        ).pl()\n\n        all_annotations.append(result)\n\n    result = polars.concat(all_annotations)\n\n    if rename_column:\n        result = result.rename(\n            {col: f\"{name}_{col}\" for col in schema if select_columns is None or col in select_columns},\n        )\n\n    return result\n</code></pre>"},{"location":"reference/sake/#sake.Sake.get_interval","title":"get_interval","text":"<pre><code>get_interval(\n    chrom: str, start: int, stop: int\n) -&gt; DataFrame\n</code></pre> <p>Get variants from chromosome between start and stop.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def get_interval(self, chrom: str, start: int, stop: int) -&gt; polars.DataFrame:\n    \"\"\"Get variants from chromosome between start and stop.\"\"\"\n    query = \"\"\"\n    select\n        v.id, v.chr, v.pos, v.ref, v.alt\n    from\n        read_parquet($path) as v\n    where\n        v.chr == $chrom\n    and\n        v.pos &gt; $start\n    and\n        v.pos &lt; $stop\n    \"\"\"\n\n    return self.db.execute(\n        query,\n        {\n            \"path\": sake._utils.fix_variants_path(self.variants_path, chrom),  # type: ignore[arg-type]\n            \"chrom\": chrom,\n            \"start\": start,\n            \"stop\": stop,\n        },\n    ).pl()\n</code></pre>"},{"location":"reference/sake/#sake.Sake.get_intervals","title":"get_intervals","text":"<pre><code>get_intervals(\n    chroms: list[str], starts: list[int], stops: list[int]\n) -&gt; DataFrame\n</code></pre> <p>Get variants in multiple intervals.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def get_intervals(self, chroms: list[str], starts: list[int], stops: list[int]) -&gt; polars.DataFrame:\n    \"\"\"Get variants in multiple intervals.\"\"\"\n    all_variants = []\n    minimal_length = min(len(chroms), len(starts), len(stops))\n    iterator = sake._utils.wrap_iterator(self.activate_tqdm, zip(chroms, zip(starts, stops)), total=minimal_length)  # type: ignore[arg-type]\n\n    for chrom, (start, stop) in iterator:\n        all_variants.append(\n            self.get_interval(chrom, start, stop),\n        )\n\n    return polars.concat(all_variants)\n</code></pre>"},{"location":"reference/sake/#sake.Sake.get_variant_of_prescription","title":"get_variant_of_prescription","text":"<pre><code>get_variant_of_prescription(prescription: str) -&gt; DataFrame\n</code></pre> <p>Get all variants of a prescription.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def get_variant_of_prescription(self, prescription: str) -&gt; polars.DataFrame:\n    \"\"\"Get all variants of a prescription.\"\"\"\n    query = \"\"\"\n    select\n        v.chr, v.pos, v.ref, v.alt, g.*\n    from\n        read_parquet($sample_path) as g\n    join\n        read_parquet($variant_path) as v\n    on\n        v.id = g.id\n    \"\"\"\n\n    return self.db.execute(\n        query,\n        {\n            \"sample_path\": str(\n                self.prescriptions_path / f\"{prescription}.parquet\",  # type: ignore[operator]\n            ),\n            \"variant_path\": sake._utils.fix_variants_path(self.variants_path),  # type: ignore[arg-type]\n        },\n    ).pl()\n</code></pre>"},{"location":"reference/sake/#sake.Sake.get_variant_of_prescriptions","title":"get_variant_of_prescriptions","text":"<pre><code>get_variant_of_prescriptions(\n    prescriptions: list[str],\n) -&gt; DataFrame\n</code></pre> <p>Get all variants of multiple prescriptions.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def get_variant_of_prescriptions(self, prescriptions: list[str]) -&gt; polars.DataFrame:\n    \"\"\"Get all variants of multiple prescriptions.\"\"\"\n    query = \"\"\"\n    select\n        v.chr, v.pos, v.ref, v.alt, g.*\n    from\n        read_parquet($sample_path) as g\n    join\n        read_parquet($variant_path) as v\n    on\n        v.id = g.id\n    \"\"\"\n\n    iterator = sake._utils.wrap_iterator(self.activate_tqdm, prescriptions)  # type: ignore[arg-type]\n\n    all_variants = []\n    for pid in iterator:\n        all_variants.append(\n            self.db.execute(\n                query,\n                {\n                    \"sample_path\": str(self.prescriptions_path / f\"{pid}.parquet\"),  # type: ignore[operator]\n                    \"variant_path\": sake._utils.fix_variants_path(self.variants_path),  # type: ignore[arg-type]\n                },\n            ).pl(),\n        )\n\n    return polars.concat(all_variants)\n</code></pre>"},{"location":"reference/sake/abc/","title":"sake.abc","text":""},{"location":"reference/sake/abc/#sake.abc","title":"abc","text":"<p>Abstract Base Classes (ABCs) according to PEP 3119.</p> <p>Classes:</p> <ul> <li> <code>ABC</code>           \u2013            <p>Helper class that provides a standard way to create an ABC using</p> </li> <li> <code>abstractclassmethod</code>           \u2013            <p>A decorator indicating abstract classmethods.</p> </li> <li> <code>abstractproperty</code>           \u2013            <p>A decorator indicating abstract properties.</p> </li> <li> <code>abstractstaticmethod</code>           \u2013            <p>A decorator indicating abstract staticmethods.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>abstractmethod</code>             \u2013              <p>A decorator indicating abstract methods.</p> </li> <li> <code>update_abstractmethods</code>             \u2013              <p>Recalculate the set of abstract methods of an abstract class.</p> </li> </ul>"},{"location":"reference/sake/abc/#sake.abc.ABC","title":"ABC","text":"<p>Helper class that provides a standard way to create an ABC using inheritance.</p>"},{"location":"reference/sake/abc/#sake.abc.abstractclassmethod","title":"abstractclassmethod","text":"<pre><code>abstractclassmethod(callable)\n</code></pre> <p>               Bases: <code>classmethod</code></p> <p>A decorator indicating abstract classmethods.</p> <p>Deprecated, use 'classmethod' with 'abstractmethod' instead:</p> <pre><code>class C(ABC):\n    @classmethod\n    @abstractmethod\n    def my_abstract_classmethod(cls, ...):\n        ...\n</code></pre> Source code in <code>src/sake/abc.py</code> <pre><code>def __init__(self, callable):\n    callable.__isabstractmethod__ = True\n    super().__init__(callable)\n</code></pre>"},{"location":"reference/sake/abc/#sake.abc.abstractproperty","title":"abstractproperty","text":"<p>               Bases: <code>property</code></p> <p>A decorator indicating abstract properties.</p> <p>Deprecated, use 'property' with 'abstractmethod' instead:</p> <pre><code>class C(ABC):\n    @property\n    @abstractmethod\n    def my_abstract_property(self):\n        ...\n</code></pre>"},{"location":"reference/sake/abc/#sake.abc.abstractstaticmethod","title":"abstractstaticmethod","text":"<pre><code>abstractstaticmethod(callable)\n</code></pre> <p>               Bases: <code>staticmethod</code></p> <p>A decorator indicating abstract staticmethods.</p> <p>Deprecated, use 'staticmethod' with 'abstractmethod' instead:</p> <pre><code>class C(ABC):\n    @staticmethod\n    @abstractmethod\n    def my_abstract_staticmethod(...):\n        ...\n</code></pre> Source code in <code>src/sake/abc.py</code> <pre><code>def __init__(self, callable):\n    callable.__isabstractmethod__ = True\n    super().__init__(callable)\n</code></pre>"},{"location":"reference/sake/abc/#sake.abc.abstractmethod","title":"abstractmethod","text":"<pre><code>abstractmethod(funcobj)\n</code></pre> <p>A decorator indicating abstract methods.</p> <p>Requires that the metaclass is ABCMeta or derived from it.  A class that has a metaclass derived from ABCMeta cannot be instantiated unless all of its abstract methods are overridden. The abstract methods can be called using any of the normal 'super' call mechanisms.  abstractmethod() may be used to declare abstract methods for properties and descriptors.</p> <p>Usage:</p> <pre><code>class C(metaclass=ABCMeta):\n    @abstractmethod\n    def my_abstract_method(self, arg1, arg2, argN):\n        ...\n</code></pre> Source code in <code>src/sake/abc.py</code> <pre><code>def abstractmethod(funcobj):\n    \"\"\"A decorator indicating abstract methods.\n\n    Requires that the metaclass is ABCMeta or derived from it.  A\n    class that has a metaclass derived from ABCMeta cannot be\n    instantiated unless all of its abstract methods are overridden.\n    The abstract methods can be called using any of the normal\n    'super' call mechanisms.  abstractmethod() may be used to declare\n    abstract methods for properties and descriptors.\n\n    Usage:\n\n        class C(metaclass=ABCMeta):\n            @abstractmethod\n            def my_abstract_method(self, arg1, arg2, argN):\n                ...\n    \"\"\"\n    funcobj.__isabstractmethod__ = True\n    return funcobj\n</code></pre>"},{"location":"reference/sake/abc/#sake.abc.update_abstractmethods","title":"update_abstractmethods","text":"<pre><code>update_abstractmethods(cls)\n</code></pre> <p>Recalculate the set of abstract methods of an abstract class.</p> <p>If a class has had one of its abstract methods implemented after the class was created, the method will not be considered implemented until this function is called. Alternatively, if a new abstract method has been added to the class, it will only be considered an abstract method of the class after this function is called.</p> <p>This function should be called before any use is made of the class, usually in class decorators that add methods to the subject class.</p> <p>Returns cls, to allow usage as a class decorator.</p> <p>If cls is not an instance of ABCMeta, does nothing.</p> Source code in <code>src/sake/abc.py</code> <pre><code>def update_abstractmethods(cls):\n    \"\"\"Recalculate the set of abstract methods of an abstract class.\n\n    If a class has had one of its abstract methods implemented after the\n    class was created, the method will not be considered implemented until\n    this function is called. Alternatively, if a new abstract method has been\n    added to the class, it will only be considered an abstract method of the\n    class after this function is called.\n\n    This function should be called before any use is made of the class,\n    usually in class decorators that add methods to the subject class.\n\n    Returns cls, to allow usage as a class decorator.\n\n    If cls is not an instance of ABCMeta, does nothing.\n    \"\"\"\n    if not hasattr(cls, \"__abstractmethods__\"):\n        # We check for __abstractmethods__ here because cls might by a C\n        # implementation or a python implementation (especially during\n        # testing), and we want to handle both cases.\n        return cls\n\n    abstracts = set()\n    # Check the existing abstract methods of the parents, keep only the ones\n    # that are not implemented.\n    for scls in cls.__bases__:\n        for name in getattr(scls, \"__abstractmethods__\", ()):\n            value = getattr(cls, name, None)\n            if getattr(value, \"__isabstractmethod__\", False):\n                abstracts.add(name)\n    # Also add any other newly added abstract methods.\n    for name, value in cls.__dict__.items():\n        if getattr(value, \"__isabstractmethod__\", False):\n            abstracts.add(name)\n    cls.__abstractmethods__ = frozenset(abstracts)\n    return cls\n</code></pre>"},{"location":"reference/sake/dataclasses/","title":"sake.dataclasses","text":""},{"location":"reference/sake/dataclasses/#sake.dataclasses","title":"dataclasses","text":"<p>Functions:</p> <ul> <li> <code>asdict</code>             \u2013              <p>Return the fields of a dataclass instance as a new dictionary mapping</p> </li> <li> <code>astuple</code>             \u2013              <p>Return the fields of a dataclass instance as a new tuple of field values.</p> </li> <li> <code>dataclass</code>             \u2013              <p>Returns the same class as was passed in, with dunder methods</p> </li> <li> <code>field</code>             \u2013              <p>Return an object to identify dataclass fields.</p> </li> <li> <code>fields</code>             \u2013              <p>Return a tuple describing the fields of this dataclass.</p> </li> <li> <code>is_dataclass</code>             \u2013              <p>Returns True if obj is a dataclass or an instance of a</p> </li> <li> <code>make_dataclass</code>             \u2013              <p>Return a new dynamically created dataclass.</p> </li> <li> <code>replace</code>             \u2013              <p>Return a new object replacing specified fields with new values.</p> </li> </ul>"},{"location":"reference/sake/dataclasses/#sake.dataclasses.asdict","title":"asdict","text":"<pre><code>asdict(obj, *, dict_factory=dict)\n</code></pre> <p>Return the fields of a dataclass instance as a new dictionary mapping field names to field values.</p> <p>Example usage:</p> <p>@dataclass   class C:       x: int       y: int</p> <p>c = C(1, 2)   assert asdict(c) == {'x': 1, 'y': 2}</p> <p>If given, 'dict_factory' will be used instead of built-in dict. The function applies recursively to field values that are dataclass instances. This will also look into built-in containers: tuples, lists, and dicts.</p> Source code in <code>src/sake/dataclasses.py</code> <pre><code>def asdict(obj, *, dict_factory=dict):\n    \"\"\"Return the fields of a dataclass instance as a new dictionary mapping\n    field names to field values.\n\n    Example usage:\n\n      @dataclass\n      class C:\n          x: int\n          y: int\n\n      c = C(1, 2)\n      assert asdict(c) == {'x': 1, 'y': 2}\n\n    If given, 'dict_factory' will be used instead of built-in dict.\n    The function applies recursively to field values that are\n    dataclass instances. This will also look into built-in containers:\n    tuples, lists, and dicts.\n    \"\"\"\n    if not _is_dataclass_instance(obj):\n        raise TypeError(\"asdict() should be called on dataclass instances\")\n    return _asdict_inner(obj, dict_factory)\n</code></pre>"},{"location":"reference/sake/dataclasses/#sake.dataclasses.astuple","title":"astuple","text":"<pre><code>astuple(obj, *, tuple_factory=tuple)\n</code></pre> <p>Return the fields of a dataclass instance as a new tuple of field values.</p> <p>Example usage::</p> <p>@dataclass   class C:       x: int       y: int</p> <p>c = C(1, 2) assert astuple(c) == (1, 2)</p> <p>If given, 'tuple_factory' will be used instead of built-in tuple. The function applies recursively to field values that are dataclass instances. This will also look into built-in containers: tuples, lists, and dicts.</p> Source code in <code>src/sake/dataclasses.py</code> <pre><code>def astuple(obj, *, tuple_factory=tuple):\n    \"\"\"Return the fields of a dataclass instance as a new tuple of field values.\n\n    Example usage::\n\n      @dataclass\n      class C:\n          x: int\n          y: int\n\n    c = C(1, 2)\n    assert astuple(c) == (1, 2)\n\n    If given, 'tuple_factory' will be used instead of built-in tuple.\n    The function applies recursively to field values that are\n    dataclass instances. This will also look into built-in containers:\n    tuples, lists, and dicts.\n    \"\"\"\n\n    if not _is_dataclass_instance(obj):\n        raise TypeError(\"astuple() should be called on dataclass instances\")\n    return _astuple_inner(obj, tuple_factory)\n</code></pre>"},{"location":"reference/sake/dataclasses/#sake.dataclasses.dataclass","title":"dataclass","text":"<pre><code>dataclass(\n    cls=None,\n    /,\n    *,\n    init=True,\n    repr=True,\n    eq=True,\n    order=False,\n    unsafe_hash=False,\n    frozen=False,\n    match_args=True,\n    kw_only=False,\n    slots=False,\n)\n</code></pre> <p>Returns the same class as was passed in, with dunder methods added based on the fields defined in the class.</p> <p>Examines PEP 526 annotations to determine fields.</p> <p>If init is true, an init() method is added to the class. If repr is true, a repr() method is added. If order is true, rich comparison dunder methods are added. If unsafe_hash is true, a hash() method function is added. If frozen is true, fields may not be assigned to after instance creation. If match_args is true, the match_args tuple is added. If kw_only is true, then by default all fields are keyword-only. If slots is true, an slots attribute is added.</p> Source code in <code>src/sake/dataclasses.py</code> <pre><code>def dataclass(\n    cls=None,\n    /,\n    *,\n    init=True,\n    repr=True,\n    eq=True,\n    order=False,\n    unsafe_hash=False,\n    frozen=False,\n    match_args=True,\n    kw_only=False,\n    slots=False,\n):\n    \"\"\"Returns the same class as was passed in, with dunder methods\n    added based on the fields defined in the class.\n\n    Examines PEP 526 __annotations__ to determine fields.\n\n    If init is true, an __init__() method is added to the class. If\n    repr is true, a __repr__() method is added. If order is true, rich\n    comparison dunder methods are added. If unsafe_hash is true, a\n    __hash__() method function is added. If frozen is true, fields may\n    not be assigned to after instance creation. If match_args is true,\n    the __match_args__ tuple is added. If kw_only is true, then by\n    default all fields are keyword-only. If slots is true, an\n    __slots__ attribute is added.\n    \"\"\"\n\n    def wrap(cls):\n        return _process_class(cls, init, repr, eq, order, unsafe_hash, frozen, match_args, kw_only, slots)\n\n    # See if we're being called as @dataclass or @dataclass().\n    if cls is None:\n        # We're called with parens.\n        return wrap\n\n    # We're called as @dataclass without parens.\n    return wrap(cls)\n</code></pre>"},{"location":"reference/sake/dataclasses/#sake.dataclasses.field","title":"field","text":"<pre><code>field(\n    *,\n    default=MISSING,\n    default_factory=MISSING,\n    init=True,\n    repr=True,\n    hash=None,\n    compare=True,\n    metadata=None,\n    kw_only=MISSING,\n)\n</code></pre> <p>Return an object to identify dataclass fields.</p> <p>default is the default value of the field.  default_factory is a 0-argument function called to initialize a field's value.  If init is true, the field will be a parameter to the class's init() function.  If repr is true, the field will be included in the object's repr().  If hash is true, the field will be included in the object's hash().  If compare is true, the field will be used in comparison functions.  metadata, if specified, must be a mapping which is stored but not otherwise examined by dataclass.  If kw_only is true, the field will become a keyword-only parameter to init().</p> <p>It is an error to specify both default and default_factory.</p> Source code in <code>src/sake/dataclasses.py</code> <pre><code>def field(\n    *,\n    default=MISSING,\n    default_factory=MISSING,\n    init=True,\n    repr=True,\n    hash=None,\n    compare=True,\n    metadata=None,\n    kw_only=MISSING,\n):\n    \"\"\"Return an object to identify dataclass fields.\n\n    default is the default value of the field.  default_factory is a\n    0-argument function called to initialize a field's value.  If init\n    is true, the field will be a parameter to the class's __init__()\n    function.  If repr is true, the field will be included in the\n    object's repr().  If hash is true, the field will be included in the\n    object's hash().  If compare is true, the field will be used in\n    comparison functions.  metadata, if specified, must be a mapping\n    which is stored but not otherwise examined by dataclass.  If kw_only\n    is true, the field will become a keyword-only parameter to\n    __init__().\n\n    It is an error to specify both default and default_factory.\n    \"\"\"\n\n    if default is not MISSING and default_factory is not MISSING:\n        raise ValueError(\"cannot specify both default and default_factory\")\n    return Field(default, default_factory, init, repr, hash, compare, metadata, kw_only)\n</code></pre>"},{"location":"reference/sake/dataclasses/#sake.dataclasses.fields","title":"fields","text":"<pre><code>fields(class_or_instance)\n</code></pre> <p>Return a tuple describing the fields of this dataclass.</p> <p>Accepts a dataclass or an instance of one. Tuple elements are of type Field.</p> Source code in <code>src/sake/dataclasses.py</code> <pre><code>def fields(class_or_instance):\n    \"\"\"Return a tuple describing the fields of this dataclass.\n\n    Accepts a dataclass or an instance of one. Tuple elements are of\n    type Field.\n    \"\"\"\n\n    # Might it be worth caching this, per class?\n    try:\n        fields = getattr(class_or_instance, _FIELDS)\n    except AttributeError:\n        raise TypeError(\"must be called with a dataclass type or instance\") from None\n\n    # Exclude pseudo-fields.  Note that fields is sorted by insertion\n    # order, so the order of the tuple is as the fields were defined.\n    return tuple(f for f in fields.values() if f._field_type is _FIELD)\n</code></pre>"},{"location":"reference/sake/dataclasses/#sake.dataclasses.is_dataclass","title":"is_dataclass","text":"<pre><code>is_dataclass(obj)\n</code></pre> <p>Returns True if obj is a dataclass or an instance of a dataclass.</p> Source code in <code>src/sake/dataclasses.py</code> <pre><code>def is_dataclass(obj):\n    \"\"\"Returns True if obj is a dataclass or an instance of a\n    dataclass.\"\"\"\n    cls = obj if isinstance(obj, type) and not isinstance(obj, GenericAlias) else type(obj)\n    return hasattr(cls, _FIELDS)\n</code></pre>"},{"location":"reference/sake/dataclasses/#sake.dataclasses.make_dataclass","title":"make_dataclass","text":"<pre><code>make_dataclass(\n    cls_name,\n    fields,\n    *,\n    bases=(),\n    namespace=None,\n    init=True,\n    repr=True,\n    eq=True,\n    order=False,\n    unsafe_hash=False,\n    frozen=False,\n    match_args=True,\n    kw_only=False,\n    slots=False,\n)\n</code></pre> <p>Return a new dynamically created dataclass.</p> <p>The dataclass name will be 'cls_name'.  'fields' is an iterable of either (name), (name, type) or (name, type, Field) objects. If type is omitted, use the string 'typing.Any'.  Field objects are created by the equivalent of calling 'field(name, type [, Field-info])'.</p> <p>C = make_dataclass('C', ['x', ('y', int), ('z', int, field(init=False))], bases=(Base,))</p> <p>is equivalent to:</p> <p>@dataclass   class C(Base):       x: 'typing.Any'       y: int       z: int = field(init=False)</p> <p>For the bases and namespace parameters, see the builtin type() function.</p> <p>The parameters init, repr, eq, order, unsafe_hash, and frozen are passed to dataclass().</p> Source code in <code>src/sake/dataclasses.py</code> <pre><code>def make_dataclass(\n    cls_name,\n    fields,\n    *,\n    bases=(),\n    namespace=None,\n    init=True,\n    repr=True,\n    eq=True,\n    order=False,\n    unsafe_hash=False,\n    frozen=False,\n    match_args=True,\n    kw_only=False,\n    slots=False,\n):\n    \"\"\"Return a new dynamically created dataclass.\n\n    The dataclass name will be 'cls_name'.  'fields' is an iterable\n    of either (name), (name, type) or (name, type, Field) objects. If type is\n    omitted, use the string 'typing.Any'.  Field objects are created by\n    the equivalent of calling 'field(name, type [, Field-info])'.\n\n      C = make_dataclass('C', ['x', ('y', int), ('z', int, field(init=False))], bases=(Base,))\n\n    is equivalent to:\n\n      @dataclass\n      class C(Base):\n          x: 'typing.Any'\n          y: int\n          z: int = field(init=False)\n\n    For the bases and namespace parameters, see the builtin type() function.\n\n    The parameters init, repr, eq, order, unsafe_hash, and frozen are passed to\n    dataclass().\n    \"\"\"\n\n    if namespace is None:\n        namespace = {}\n\n    # While we're looking through the field names, validate that they\n    # are identifiers, are not keywords, and not duplicates.\n    seen = set()\n    annotations = {}\n    defaults = {}\n    for item in fields:\n        if isinstance(item, str):\n            name = item\n            tp = \"typing.Any\"\n        elif len(item) == 2:\n            (\n                name,\n                tp,\n            ) = item\n        elif len(item) == 3:\n            name, tp, spec = item\n            defaults[name] = spec\n        else:\n            raise TypeError(f\"Invalid field: {item!r}\")\n\n        if not isinstance(name, str) or not name.isidentifier():\n            raise TypeError(f\"Field names must be valid identifiers: {name!r}\")\n        if keyword.iskeyword(name):\n            raise TypeError(f\"Field names must not be keywords: {name!r}\")\n        if name in seen:\n            raise TypeError(f\"Field name duplicated: {name!r}\")\n\n        seen.add(name)\n        annotations[name] = tp\n\n    # Update 'ns' with the user-supplied namespace plus our calculated values.\n    def exec_body_callback(ns):\n        ns.update(namespace)\n        ns.update(defaults)\n        ns[\"__annotations__\"] = annotations\n\n    # We use `types.new_class()` instead of simply `type()` to allow dynamic creation\n    # of generic dataclasses.\n    cls = types.new_class(cls_name, bases, {}, exec_body_callback)\n\n    # Apply the normal decorator.\n    return dataclass(\n        cls,\n        init=init,\n        repr=repr,\n        eq=eq,\n        order=order,\n        unsafe_hash=unsafe_hash,\n        frozen=frozen,\n        match_args=match_args,\n        kw_only=kw_only,\n        slots=slots,\n    )\n</code></pre>"},{"location":"reference/sake/dataclasses/#sake.dataclasses.replace","title":"replace","text":"<pre><code>replace(obj, /, **changes)\n</code></pre> <p>Return a new object replacing specified fields with new values.</p> <p>This is especially useful for frozen classes.  Example usage:</p> <p>@dataclass(frozen=True)   class C:       x: int       y: int</p> <p>c = C(1, 2)   c1 = replace(c, x=3)   assert c1.x == 3 and c1.y == 2</p> Source code in <code>src/sake/dataclasses.py</code> <pre><code>def replace(obj, /, **changes):\n    \"\"\"Return a new object replacing specified fields with new values.\n\n    This is especially useful for frozen classes.  Example usage:\n\n      @dataclass(frozen=True)\n      class C:\n          x: int\n          y: int\n\n      c = C(1, 2)\n      c1 = replace(c, x=3)\n      assert c1.x == 3 and c1.y == 2\n    \"\"\"\n\n    # We're going to mutate 'changes', but that's okay because it's a\n    # new dict, even if called with 'replace(obj, **my_changes)'.\n\n    if not _is_dataclass_instance(obj):\n        raise TypeError(\"replace() should be called on dataclass instances\")\n\n    # It's an error to have init=False fields in 'changes'.\n    # If a field is not in 'changes', read its value from the provided obj.\n\n    for f in getattr(obj, _FIELDS).values():\n        # Only consider normal fields or InitVars.\n        if f._field_type is _FIELD_CLASSVAR:\n            continue\n\n        if not f.init:\n            # Error if this field is specified in changes.\n            if f.name in changes:\n                raise ValueError(f\"field {f.name} is declared with init=False, it cannot be specified with replace()\")\n            continue\n\n        if f.name not in changes:\n            if f._field_type is _FIELD_INITVAR and f.default is MISSING:\n                raise ValueError(f\"InitVar {f.name!r} must be specified with replace()\")\n            changes[f.name] = getattr(obj, f.name)\n\n    # Create the new object, which calls __init__() and\n    # __post_init__() (if defined), using all of the init fields we've\n    # added and/or left in 'changes'.  If there are values supplied in\n    # changes that aren't fields, this will correctly raise a\n    # TypeError.\n    return obj.__class__(**changes)\n</code></pre>"},{"location":"reference/sake/obj/","title":"sake.obj","text":""},{"location":"reference/sake/obj/#sake.obj","title":"obj","text":"<p>Define Sake dataclass.</p> <p>Classes:</p> <ul> <li> <code>Sake</code>           \u2013            <p>Class that let user extract variants from sake.</p> </li> </ul>"},{"location":"reference/sake/obj/#sake.obj.Sake","title":"Sake  <code>dataclass</code>","text":"<pre><code>Sake(\n    *,\n    sake_path: Path,\n    target: str,\n    threads: int | None = cpu_count(),\n    activate_tqdm: bool | None = False,\n    aggregations_path: Path | None = None,\n    annotations_path: Path | None = None,\n    cnv_path: Path | None = None,\n    partitions_path: Path | None = None,\n    prescriptions_path: Path | None = None,\n    samples_path: Path | None = None,\n    str_path: Path | None = None,\n    transmissions_path: Path | None = None,\n    variants_path: Path | None = None,\n)\n</code></pre> <p>Class that let user extract variants from sake.</p> <p>Methods:</p> <ul> <li> <code>add_annotations</code>             \u2013              <p>Add annotations to variants.</p> </li> <li> <code>add_genotypes</code>             \u2013              <p>Add genotype information to variants DataFrame.</p> </li> <li> <code>add_sample_info</code>             \u2013              <p>Add sample information.</p> </li> <li> <code>add_transmissions</code>             \u2013              <p>Add transmissions information.</p> </li> <li> <code>add_variants</code>             \u2013              <p>Use id of column polars.DataFrame to get variant information.</p> </li> <li> <code>all_variants</code>             \u2013              <p>Get all variants of a target in present in Sake.</p> </li> <li> <code>get_annotations</code>             \u2013              <p>Get all variants of an annotations.</p> </li> <li> <code>get_interval</code>             \u2013              <p>Get variants from chromosome between start and stop.</p> </li> <li> <code>get_intervals</code>             \u2013              <p>Get variants in multiple intervals.</p> </li> <li> <code>get_variant_of_prescription</code>             \u2013              <p>Get all variants of a prescription.</p> </li> <li> <code>get_variant_of_prescriptions</code>             \u2013              <p>Get all variants of multiple prescriptions.</p> </li> </ul>"},{"location":"reference/sake/obj/#sake.obj.Sake.add_annotations","title":"add_annotations","text":"<pre><code>add_annotations(\n    variants: DataFrame,\n    name: str,\n    version: str,\n    *,\n    rename_column: bool = True,\n    select_columns: list[str] | None = None,\n) -&gt; DataFrame\n</code></pre> <p>Add annotations to variants.</p> <p>Require <code>id</code> column in variants value</p> Source code in <code>src/sake/obj.py</code> <pre><code>def add_annotations(\n    self,\n    variants: polars.DataFrame,\n    name: str,\n    version: str,\n    *,\n    rename_column: bool = True,\n    select_columns: list[str] | None = None,\n) -&gt; polars.DataFrame:\n    \"\"\"Add annotations to variants.\n\n    Require `id` column in variants value\n    \"\"\"\n    # annotations_path are set in __post_init__\n    annotation_path = self.annotations_path / f\"{name}\" / f\"{version}\"  # type: ignore[operator]\n\n    schema = polars.read_parquet_schema(annotation_path / \"1.parquet\")\n    if \"id\" in schema:\n        del schema[\"id\"]\n    columns = \",\".join([f\"a.{col}\" for col in schema if select_columns is None or col in select_columns])\n\n    all_annotations = []\n    iterator = sake._utils.wrap_iterator(\n        self.activate_tqdm,  # type: ignore[arg-type]\n        variants.group_by([\"chr\"]),\n        total=variants.get_column(\"chr\").unique().len(),\n    )\n\n    query = f\"\"\"\n    select\n        v.*, {columns}\n    from\n        _data as v\n    left join\n        read_parquet($path) as a\n    on\n        v.id == a.id\n    \"\"\"  # noqa: S608 we accept risk of sql inject\n\n    for (chrom, *_), _data in iterator:\n        if not (annotation_path / f\"{chrom}.parquet\").is_file():\n            continue\n\n        result = self.db.execute(\n            query,\n            {\n                \"path\": str(annotation_path / f\"{chrom}.parquet\"),\n            },\n        ).pl()\n\n        all_annotations.append(result)\n\n    result = polars.concat(all_annotations)\n\n    if rename_column:\n        result = result.rename(\n            {col: f\"{name}_{col}\" for col in schema if select_columns is None or col in select_columns},\n        )\n\n    return result\n</code></pre>"},{"location":"reference/sake/obj/#sake.obj.Sake.add_genotypes","title":"add_genotypes","text":"<pre><code>add_genotypes(\n    variants: DataFrame,\n    *,\n    keep_id_part: bool = False,\n    drop_column: list[str] | None = None,\n    number_of_bits: int = 8,\n    read_threads: int = 1,\n) -&gt; DataFrame\n</code></pre> <p>Add genotype information to variants DataFrame.</p> <p>Require <code>id</code> column in variants value</p> Source code in <code>src/sake/obj.py</code> <pre><code>def add_genotypes(\n    self,\n    variants: polars.DataFrame,\n    *,\n    keep_id_part: bool = False,\n    drop_column: list[str] | None = None,\n    number_of_bits: int = 8,\n    read_threads: int = 1,\n) -&gt; polars.DataFrame:\n    \"\"\"Add genotype information to variants DataFrame.\n\n    Require `id` column in variants value\n    \"\"\"\n    variants = sake.utils.add_id_part(variants, number_of_bits=number_of_bits)\n\n    if drop_column is None:\n        drop_column = []\n\n    if not keep_id_part:\n        drop_column.append(\"id_part\")\n\n    all_genotypes: list[polars.DataFrame | None] = []\n    iterator = sake._utils.wrap_iterator(\n        self.activate_tqdm,  # type: ignore[arg-type]\n        variants.group_by([\"id_part\"]),\n        total=variants.get_column(\"id_part\").unique().len(),\n    )\n\n    if read_threads == 1:\n        query = sake._utils.GenotypeQuery(self.threads, self.partitions_path, drop_column)  # type: ignore[arg-type]\n        all_genotypes = list(map(query, iterator))\n    else:\n        duckdb_threads = self.threads // read_threads  # type: ignore[operator]\n        query = sake._utils.GenotypeQuery(duckdb_threads, self.partitions_path, drop_column)  # type: ignore[arg-type]\n        self.db.query(f\"SET threads TO {duckdb_threads};\")\n\n        with multiprocessing.get_context(\"spawn\").Pool(processes=read_threads) as pool:\n            all_genotypes = list(pool.imap(query, iterator))\n\n        self.db.query(f\"SET threads TO {self.threads}\")\n\n    return polars.concat([df for df in all_genotypes if df is not None])\n</code></pre>"},{"location":"reference/sake/obj/#sake.obj.Sake.add_sample_info","title":"add_sample_info","text":"<pre><code>add_sample_info(\n    _variants: DataFrame,\n    *,\n    select_columns: list[str] | None = None,\n) -&gt; DataFrame\n</code></pre> <p>Add sample information.</p> <p>Required sample column in polars.DataFrame.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def add_sample_info(\n    self,\n    _variants: polars.DataFrame,\n    *,\n    select_columns: list[str] | None = None,\n) -&gt; polars.DataFrame:\n    \"\"\"Add sample information.\n\n    Required sample column in polars.DataFrame.\n    \"\"\"\n    # sampless_path are set in __post_init__\n    schema = polars.read_parquet_schema(self.samples_path)  # type: ignore[arg-type]\n\n    if select_columns is None:\n        select_columns = [col for col in schema if col != \"sample\"]\n\n    columns = \",\".join([f\"s.{col}\" for col in schema if col in select_columns])\n\n    query = f\"\"\"\n    select\n        v.*, {columns}\n    from\n        _variants as v\n    left join\n        read_parquet($path) as s\n    on\n        v.sample == s.sample\n    \"\"\"  # noqa: S608 we accept risk of sql inject\n\n    return self.db.execute(\n        query,\n        {\n            \"path\": str(self.samples_path),\n        },\n    ).pl()\n</code></pre>"},{"location":"reference/sake/obj/#sake.obj.Sake.add_transmissions","title":"add_transmissions","text":"<pre><code>add_transmissions(variants: DataFrame) -&gt; DataFrame\n</code></pre> <p>Add transmissions information.</p> <p>Required pid_crc column in polars.DataFrame.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def add_transmissions(\n    self,\n    variants: polars.DataFrame,\n) -&gt; polars.DataFrame:\n    \"\"\"Add transmissions information.\n\n    Required pid_crc column in polars.DataFrame.\n    \"\"\"\n    all_transmissions = []\n\n    input_columns = \",\".join([f\"v.{col}\" for col in variants.schema if col != \"id\"])\n\n    iterator = sake._utils.wrap_iterator(\n        self.activate_tqdm,  # type: ignore[arg-type]\n        variants.group_by([\"pid_crc\"]),\n        total=variants.get_column(\"pid_crc\").unique().len(),\n    )\n\n    query = f\"\"\"\n    select\n        {input_columns}, t.*\n    from\n        _data as v\n    left join\n        read_parquet($path) as t\n    on\n        v.id == t.id\n    where\n        v.kindex == True\n    \"\"\"  # noqa: S608 we accept risk of sql inject\n\n    for (pid_crc, *_), _data in iterator:\n        path = pathlib.Path(str(self.transmissions_path).format(target=\"germline\")) / f\"{pid_crc}.parquet\"\n\n        if not path.is_file():\n            continue\n\n        result = (\n            self.db.execute(\n                query,\n                {\n                    \"path\": str(path),\n                },\n            )\n            .pl()\n            .cast(\n                {\n                    \"father_gt\": polars.UInt8,\n                    \"mother_gt\": polars.UInt8,\n                    \"index_gt\": polars.UInt8,\n                    \"father_dp\": polars.UInt32,\n                    \"mother_dp\": polars.UInt32,\n                    \"father_gq\": polars.UInt32,\n                    \"mother_gq\": polars.UInt32,\n                },\n            )\n            .with_columns(\n                father_ad=polars.col(\"father_ad\").cast(polars.List(polars.String)).list.join(\",\"),\n                mother_ad=polars.col(\"mother_ad\").cast(polars.List(polars.String)).list.join(\",\"),\n                index_ad=polars.col(\"index_ad\").cast(polars.List(polars.String)).list.join(\",\"),\n            )\n        )\n\n        all_transmissions.append(result)\n\n    return polars.concat(all_transmissions)\n</code></pre>"},{"location":"reference/sake/obj/#sake.obj.Sake.add_variants","title":"add_variants","text":"<pre><code>add_variants(_data: DataFrame) -&gt; DataFrame\n</code></pre> <p>Use id of column polars.DataFrame to get variant information.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def add_variants(self, _data: polars.DataFrame) -&gt; polars.DataFrame:\n    \"\"\"Use id of column polars.DataFrame to get variant information.\"\"\"\n    query = \"\"\"\n    select\n        v.chr, v.pos, v.ref, v.alt, d.*\n    from\n        read_parquet($path) as v\n    join\n        _data as d\n    on\n        v.id == d.id\n    \"\"\"\n\n    return self.db.execute(\n        query,\n        {\n            \"path\": sake._utils.fix_variants_path(self.variants_path),  # type: ignore[arg-type]\n        },\n    ).pl()\n</code></pre>"},{"location":"reference/sake/obj/#sake.obj.Sake.all_variants","title":"all_variants","text":"<pre><code>all_variants() -&gt; DataFrame\n</code></pre> <p>Get all variants of a target in present in Sake.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def all_variants(self) -&gt; polars.DataFrame:\n    \"\"\"Get all variants of a target in present in Sake.\"\"\"\n    query = \"\"\"\n    select\n        v.id, v.chr, v.pos, v.ref, v.alt\n    from\n        read_parquet($path) as v\n    \"\"\"\n\n    return self.db.execute(\n        query,\n        {\n            \"path\": sake._utils.fix_variants_path(self.variants_path, None),  # type: ignore[arg-type]\n        },\n    ).pl()\n</code></pre>"},{"location":"reference/sake/obj/#sake.obj.Sake.get_annotations","title":"get_annotations","text":"<pre><code>get_annotations(\n    name: str,\n    version: str,\n    *,\n    rename_column: bool = True,\n    select_columns: list[str] | None = None,\n) -&gt; DataFrame\n</code></pre> <p>Get all variants of an annotations.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def get_annotations(\n    self,\n    name: str,\n    version: str,\n    *,\n    rename_column: bool = True,\n    select_columns: list[str] | None = None,\n) -&gt; polars.DataFrame:\n    \"\"\"Get all variants of an annotations.\"\"\"\n    annotation_path = self.annotations_path / f\"{name}\" / f\"{version}\"  # type: ignore[operator]\n\n    schema = polars.read_parquet_schema(annotation_path / \"1.parquet\")\n    chromosomes_list = [\n        entry.name.split(\".\")[0]\n        for entry in os.scandir(annotation_path)\n        if entry.is_file() and entry.name.endswith(\".parquet\")\n    ]\n\n    if \"id\" in schema:\n        del schema[\"id\"]\n        columns = \",\".join([f\"a.{col}\" for col in schema if select_columns is None or col in select_columns])\n\n    query = f\"\"\"\n    select\n        v.*, {columns}\n    from\n        read_parquet($annotation_path) as a\n    join\n        read_parquet($variant_path) as v\n    on\n        v.id = a.id\n    \"\"\"  # noqa: S608 we accept risk of sql inject\n\n    all_annotations = []\n    iterator = sake._utils.wrap_iterator(self.activate_tqdm, chromosomes_list)  # type: ignore[arg-type]\n    for chrom in iterator:\n        result = self.db.execute(\n            query,\n            {\n                \"annotation_path\": str(\n                    self.annotations_path / f\"{name}\" / f\"{version}\" / f\"{chrom}.parquet\",  # type: ignore[operator]\n                ),\n                \"variant_path\": sake._utils.fix_variants_path(self.variants_path),  # type: ignore[arg-type]\n            },\n        ).pl()\n\n        all_annotations.append(result)\n\n    result = polars.concat(all_annotations)\n\n    if rename_column:\n        result = result.rename(\n            {col: f\"{name}_{col}\" for col in schema if select_columns is None or col in select_columns},\n        )\n\n    return result\n</code></pre>"},{"location":"reference/sake/obj/#sake.obj.Sake.get_interval","title":"get_interval","text":"<pre><code>get_interval(\n    chrom: str, start: int, stop: int\n) -&gt; DataFrame\n</code></pre> <p>Get variants from chromosome between start and stop.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def get_interval(self, chrom: str, start: int, stop: int) -&gt; polars.DataFrame:\n    \"\"\"Get variants from chromosome between start and stop.\"\"\"\n    query = \"\"\"\n    select\n        v.id, v.chr, v.pos, v.ref, v.alt\n    from\n        read_parquet($path) as v\n    where\n        v.chr == $chrom\n    and\n        v.pos &gt; $start\n    and\n        v.pos &lt; $stop\n    \"\"\"\n\n    return self.db.execute(\n        query,\n        {\n            \"path\": sake._utils.fix_variants_path(self.variants_path, chrom),  # type: ignore[arg-type]\n            \"chrom\": chrom,\n            \"start\": start,\n            \"stop\": stop,\n        },\n    ).pl()\n</code></pre>"},{"location":"reference/sake/obj/#sake.obj.Sake.get_intervals","title":"get_intervals","text":"<pre><code>get_intervals(\n    chroms: list[str], starts: list[int], stops: list[int]\n) -&gt; DataFrame\n</code></pre> <p>Get variants in multiple intervals.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def get_intervals(self, chroms: list[str], starts: list[int], stops: list[int]) -&gt; polars.DataFrame:\n    \"\"\"Get variants in multiple intervals.\"\"\"\n    all_variants = []\n    minimal_length = min(len(chroms), len(starts), len(stops))\n    iterator = sake._utils.wrap_iterator(self.activate_tqdm, zip(chroms, zip(starts, stops)), total=minimal_length)  # type: ignore[arg-type]\n\n    for chrom, (start, stop) in iterator:\n        all_variants.append(\n            self.get_interval(chrom, start, stop),\n        )\n\n    return polars.concat(all_variants)\n</code></pre>"},{"location":"reference/sake/obj/#sake.obj.Sake.get_variant_of_prescription","title":"get_variant_of_prescription","text":"<pre><code>get_variant_of_prescription(prescription: str) -&gt; DataFrame\n</code></pre> <p>Get all variants of a prescription.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def get_variant_of_prescription(self, prescription: str) -&gt; polars.DataFrame:\n    \"\"\"Get all variants of a prescription.\"\"\"\n    query = \"\"\"\n    select\n        v.chr, v.pos, v.ref, v.alt, g.*\n    from\n        read_parquet($sample_path) as g\n    join\n        read_parquet($variant_path) as v\n    on\n        v.id = g.id\n    \"\"\"\n\n    return self.db.execute(\n        query,\n        {\n            \"sample_path\": str(\n                self.prescriptions_path / f\"{prescription}.parquet\",  # type: ignore[operator]\n            ),\n            \"variant_path\": sake._utils.fix_variants_path(self.variants_path),  # type: ignore[arg-type]\n        },\n    ).pl()\n</code></pre>"},{"location":"reference/sake/obj/#sake.obj.Sake.get_variant_of_prescriptions","title":"get_variant_of_prescriptions","text":"<pre><code>get_variant_of_prescriptions(\n    prescriptions: list[str],\n) -&gt; DataFrame\n</code></pre> <p>Get all variants of multiple prescriptions.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def get_variant_of_prescriptions(self, prescriptions: list[str]) -&gt; polars.DataFrame:\n    \"\"\"Get all variants of multiple prescriptions.\"\"\"\n    query = \"\"\"\n    select\n        v.chr, v.pos, v.ref, v.alt, g.*\n    from\n        read_parquet($sample_path) as g\n    join\n        read_parquet($variant_path) as v\n    on\n        v.id = g.id\n    \"\"\"\n\n    iterator = sake._utils.wrap_iterator(self.activate_tqdm, prescriptions)  # type: ignore[arg-type]\n\n    all_variants = []\n    for pid in iterator:\n        all_variants.append(\n            self.db.execute(\n                query,\n                {\n                    \"sample_path\": str(self.prescriptions_path / f\"{pid}.parquet\"),  # type: ignore[operator]\n                    \"variant_path\": sake._utils.fix_variants_path(self.variants_path),  # type: ignore[arg-type]\n                },\n            ).pl(),\n        )\n\n    return polars.concat(all_variants)\n</code></pre>"},{"location":"reference/sake/utils/","title":"sake.utils","text":""},{"location":"reference/sake/utils/#sake.utils","title":"utils","text":"<p>Some utils function.</p> <p>Functions:</p> <ul> <li> <code>add_id_part</code>             \u2013              <p>Compute and add id_part of polars.DataFrame.</p> </li> <li> <code>add_recurrence</code>             \u2013              <p>Compute recurrence of variant.</p> </li> <li> <code>get_list</code>             \u2013              <p>Replace list by value at index or null_value if index is out of bound.</p> </li> <li> <code>list2string</code>             \u2013              <p>Convert list in string.</p> </li> </ul>"},{"location":"reference/sake/utils/#sake.utils.add_id_part","title":"add_id_part","text":"<pre><code>add_id_part(\n    data: DataFrame, number_of_bits: int = 8\n) -&gt; DataFrame\n</code></pre> <p>Compute and add id_part of polars.DataFrame.</p> Source code in <code>src/sake/utils.py</code> <pre><code>def add_id_part(data: polars.DataFrame, number_of_bits: int = 8) -&gt; polars.DataFrame:\n    \"\"\"Compute and add id_part of polars.DataFrame.\"\"\"\n    # it's look like dark magic but it's just bit shift without bit shift operator\n    return data.with_columns(\n        id_part=polars.when(polars.col(\"id\") // pow(2, 63) == 1)\n        .then(\n            pow(2, number_of_bits) - 1,\n        )\n        .otherwise(\n            polars.col(\"id\") * 2 // pow(2, 64 - number_of_bits),\n        ),\n    )\n</code></pre>"},{"location":"reference/sake/utils/#sake.utils.add_recurrence","title":"add_recurrence","text":"<pre><code>add_recurrence(data: DataFrame) -&gt; DataFrame\n</code></pre> <p>Compute recurrence of variant.</p> <p>Requirement: - id: variant id - gt: genotype</p> Source code in <code>src/sake/utils.py</code> <pre><code>def add_recurrence(data: polars.DataFrame) -&gt; polars.DataFrame:\n    \"\"\"Compute recurrence of variant.\n\n    Requirement:\n    - id: variant id\n    - gt: genotype\n    \"\"\"\n    recurrence = data.group_by(\"id\").agg(\n        sake_AC=polars.sum(\"gt\"),\n        sake_nhomalt=(polars.col(\"gt\") - 1).sum(),\n    )\n\n    return data.join(recurrence, on=\"id\", how=\"left\")\n</code></pre>"},{"location":"reference/sake/utils/#sake.utils.get_list","title":"get_list","text":"<pre><code>get_list(\n    data: DataFrame,\n    *,\n    columns: list[str],\n    index: int = 0,\n    null_value: Any = 0,\n) -&gt; DataFrame\n</code></pre> <p>Replace list by value at index or null_value if index is out of bound.</p> Source code in <code>src/sake/utils.py</code> <pre><code>def get_list(\n    data: polars.DataFrame,\n    *,\n    columns: list[str],\n    index: int = 0,\n    null_value: typing.Any = 0,\n) -&gt; polars.DataFrame:\n    \"\"\"Replace list by value at index or null_value if index is out of bound.\"\"\"\n    return data.with_columns(\n        [polars.col(name).list.get(index, null_on_oob=True).fill_null(null_value).alias(name) for name in columns],\n    )\n</code></pre>"},{"location":"reference/sake/utils/#sake.utils.list2string","title":"list2string","text":"<pre><code>list2string(\n    data: DataFrame,\n    *,\n    columns: list[str],\n    separator: str = \",\",\n) -&gt; DataFrame\n</code></pre> <p>Convert list in string.</p> Source code in <code>src/sake/utils.py</code> <pre><code>def list2string(data: polars.DataFrame, *, columns: list[str], separator: str = \",\") -&gt; polars.DataFrame:\n    \"\"\"Convert list in string.\"\"\"\n    return data.with_columns(\n        [polars.col(name).cast(polars.List(polars.String)).list.join(separator).alias(name) for name in columns],\n    )\n</code></pre>"},{"location":"coverage/","title":"Coverage report","text":""}]}