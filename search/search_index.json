{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sake Request","text":"<p>A set of utils to interogate file of Seqoia Data Lake</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install git+https://github.com/SeqOIA-IT/sake_request@0.2.0\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Check documentation</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#020-2025-04-15","title":"0.2.0 - 2025-04-15","text":"<p>Compare with 0.1.0</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>add method to get cnv (68afdbc by Pierre Marijon).</li> <li>create duckdb object in each threads (c9132a1 by Pierre Marijon).</li> <li>add ability of add genotype to scan file (585dbd4 by Pierre Marijon).</li> <li>support unique variants in one file or split by chromosome (f9a801e by Pierre Marijon).</li> </ul>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>issue #3 (4432ba8 by Pierre Marijon).</li> <li>genotype query not use left join (9259900 by Pierre Marijon).</li> <li>simplify snpeff and variant2gene add_annotation (53b0b3c by Pierre Marijon).</li> <li> </li> <li>change in duckdb (d94a2a9 by Pierre Marijon).</li> <li>add test for all_variants (28ddd29 by Pierre Marijon).</li> </ul>"},{"location":"changelog/#2-4c4fc82-by-pierre-marijon","title":"2 (4c4fc82 by Pierre Marijon).","text":""},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>transmissions use same code as genotyping and could be paralellize (c14aa96 by Pierre Marijon).</li> <li>move string query in specific module (df7ac12 by Pierre Marijon).</li> <li>preindication target is set at object level not at method (4c6fb43 by Pierre Marijon).</li> <li>move tqdm wrapper stuff in specific function (0fc601f by Pierre Marijon).</li> </ul>"},{"location":"changelog/#010-2024-12-09","title":"0.1.0 - 2024-12-09","text":"<p>Compare with first commit</p>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>add_genotypes support variables number of bits (ef01687 by Pierre Marijon).</li> <li>switch to github (a6e96d5 by Pierre Marijon).</li> <li>duckdb connection object is public (cd5f822 by Pierre Marijon).</li> <li>disable progress bar (bd210c7 by Pierre Marijon).</li> <li>add support of tqdm (f3ede2d by Pierre Marijon).</li> <li>add code to support python3.9 (f21c322 by Pierre Marijon).</li> <li>add methode to get multiple interval (b3c11e8 by Pierre Marijon).</li> <li>reach high test coverage (178a73c by Pierre Marijon).</li> <li>Sake threads value also control polars threads (9e9ac60 by Pierre Marijon).</li> <li>Sake object could be create and unique variants are extractable (0ee518e by Pierre Marijon).</li> </ul>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>if chromosome file isn't present durring annotations skip it (f824c13 by Pierre Marijon).</li> <li>better formating of code in usage (47e3656 by Pierre Marijon).</li> <li>correct typo in utils function. (faa8273 by Pierre Marijon).</li> <li>test evaluate all path and number of thread (dc462ba by Pierre Marijon).</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at pierre.marijon-ext@aphp.fr. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd sake_request\nmake setup\n</code></pre> <p>Note</p> <p>If it fails for some reason, you'll need to install uv manually.</p> <p>You can install it with:</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>uv sync</code>.</p> <p>You now have the dependencies installed.</p> <p>You can run the application with <code>make run sake_request [ARGS...]</code>.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>The entry-point to run commands and tasks is the <code>make</code> Python script, located in the <code>scripts</code> directory. Try running <code>make</code> to show the available commands and tasks. The commands do not need the Python dependencies to be installed, while the tasks do. The cross-platform tasks are written in Python, thanks to duty.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build sake. Thank you!</p> <p>Python | uv | copier-uv</p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License colorama Cross-platform colored terminal text. <code>&gt;=0.4</code> <code>0.4.6</code> BSD License duckdb DuckDB in-process database <code>&gt;=1</code> <code>1.3.0</code> MIT License polars Blazingly fast DataFrame library <code>&gt;=1</code> <code>1.30.0</code> MIT License pyarrow Python library for Apache Arrow <code>&gt;=7.0.0</code> <code>20.0.0</code> Apache Software License tqdm Fast, Extensible Progress Meter <code>&gt;=4</code> <code>4.67.1</code> MPL-2.0 AND MIT"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License ansimarkup Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License appdirs A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=1.4</code> <code>1.4.4</code> MIT babel Internationalization utilities <code>~=2.10</code> <code>2.17.0</code> BSD-3-Clause backrefs A wrapper around re and regex that adds additional back references. <code>~=5.7.post1</code> <code>5.8</code> MIT build A simple, correct Python build frontend <code>&gt;=1</code> <code>1.2.2.post1</code> MIT License cappa Declarative CLI argument parser. <code>&gt;=0.22</code> <code>0.28.0</code> ? certifi Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2025.4.26</code> MPL-2.0 cffi Foreign Function Interface for Python calling C code. <code>&gt;=1.14</code> <code>1.17.1</code> MIT charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&gt;=2, &lt;4</code> <code>3.4.2</code> MIT click Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.2.1</code> BSD-3-Clause colorama Cross-platform colored terminal text. <code>&gt;=0.4</code> <code>0.4.6</code> BSD License coverage Code coverage measurement for Python <code>&gt;=7.5</code> <code>7.8.2</code> Apache-2.0 cryptography cryptography is a package which provides cryptographic recipes and primitives to Python developers. <code>&gt;=2.0</code> <code>45.0.4</code> Apache-2.0 OR BSD-3-Clause csscompressor A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD docutils Docutils -- Python Documentation Utilities <code>&gt;=0.21.2</code> <code>0.21.2</code> Public Domain + Python Software Foundation License + BSD License + GNU General Public License (GPL) duty A simple task runner. <code>&gt;=1</code> <code>1.6.0</code> ISC execnet execnet: rapid multi-Python deployment <code>&gt;=2.1</code> <code>2.1.1</code> MIT failprint Run a command, print its output only if it fails. <code>&gt;=0.11, !=1.0.0</code> <code>1.0.3</code> ISC ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License git-changelog Automatic Changelog generator using Jinja2 templates. <code>&gt;=2</code> <code>2.5.3</code> ISC gitdb Git Object Database <code>&gt;=4.0.1, &lt;5</code> <code>4.0.12</code> BSD License GitPython GitPython is a Python library used to interact with Git repositories <code>&gt;=3.1.44</code> <code>3.1.44</code> BSD-3-Clause griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=1.6.2</code> <code>1.7.3</code> ISC htmlmin2 An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD humanize Python humanize utilities <code>&gt;=4.9</code> <code>4.12.3</code> MIT id A tool for generating OIDC identities <code>1.5.0</code> Apache Software License idna Internationalized Domain Names in Applications (IDNA) <code>&gt;=2.5, &lt;4</code> <code>3.10</code> BSD License iniconfig brain-dead simple config-ini parsing <code>&gt;=1</code> <code>2.1.0</code> MIT jaraco.classes Utility functions for Python class constructs <code>3.4.0</code> MIT License jaraco.context Useful decorators and context managers <code>6.0.1</code> MIT License jaraco.functools Functools like those found in stdlib <code>4.1.0</code> MIT License jeepney Low-level, pure Python DBus protocol wrapper. <code>&gt;=0.4.2</code> <code>0.9.0</code> MIT Jinja2 A very fast and expressive template engine. <code>&gt;=2.11.1</code> <code>3.1.6</code> BSD License jsmin JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License keyring Store and access your passwords safely. <code>&gt;=15.1</code> <code>25.6.0</code> MIT License Markdown Python implementation of John Gruber's Markdown. <code>&gt;=3.3.6</code> <code>3.8</code> BSD-3-Clause markdown-callouts Markdown extension: a classier syntax for admonitions <code>&gt;=0.4</code> <code>0.4.0</code> MIT markdown-exec Utilities to execute code blocks in Markdown files. <code>&gt;=1</code> <code>1.10.3</code> ISC markdown-it-py Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0</code> <code>3.0.0</code> MIT License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0.1</code> <code>3.0.2</code> BSD License mdurl Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License mergedeep A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License mkdocs Project documentation with Markdown. <code>&gt;=1</code> <code>1.6.1</code> BSD-2-Clause mkdocs-autorefs Automatically link across pages in MkDocs. <code>&gt;=1.4</code> <code>1.4.2</code> ISC mkdocs-coverage MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1</code> <code>1.1.0</code> ISC mkdocs-get-deps MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT mkdocs-git-revision-date-localized-plugin Mkdocs plugin that enables displaying the localized date of the last git modification of a markdown file. <code>&gt;=1</code> <code>1.4.7</code> MIT mkdocs-material Documentation that simply works <code>&gt;=9</code> <code>9.6.14</code> MIT mkdocs-material-extensions Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT mkdocs-minify-plugin An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.8</code> <code>0.8.0</code> MIT mkdocs-section-index MkDocs plugin to allow clickable sections that lead to an index page <code>&gt;=0.3</code> <code>0.3.10</code> MIT mkdocstrings Automatic documentation from sources, for MkDocs. <code>&gt;=0.29</code> <code>0.29.1</code> ISC mkdocstrings-python A Python handler for mkdocstrings. <code>&gt;=1.16.2</code> <code>1.16.12</code> ISC more-itertools More routines for operating on iterables, beyond itertools <code>10.7.0</code> MIT License mypy Optional static typing for Python <code>&gt;=1</code> <code>1.16.0</code> MIT mypy_extensions Type system extensions for programs checked with the mypy type checker. <code>&gt;=1.0.0</code> <code>1.1.0</code> MIT nh3 Python binding to Ammonia HTML sanitizer Rust crate <code>&gt;=0.2.14</code> <code>0.2.21</code> MIT packaging Core utilities for Python packages <code>&gt;=24.1</code> <code>25.0</code> Apache Software License + BSD License paginate Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.7</code> MIT pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=2.2.0</code> <code>4.3.8</code> MIT pluggy plugin and hook calling mechanisms for python <code>&gt;=1.5, &lt;2</code> <code>1.6.0</code> MIT ptyprocess Run a subprocess in a pseudo terminal <code>~=0.6</code> <code>0.7.0</code> ISC License (ISCL) pycparser C parser in Python <code>2.22</code> BSD-3-Clause Pygments Pygments is a syntax highlighting package written in Python. <code>~=2.16</code> <code>2.19.1</code> BSD-2-Clause pymdown-extensions Extension pack for Python Markdown. <code>~=10.2</code> <code>10.15</code> MIT pyproject_hooks Wrappers to call pyproject.toml-based build backend hooks. <code>1.2.0</code> MIT License pytest pytest: simple powerful testing with Python <code>&gt;=8</code> <code>8.4.0</code> MIT pytest-cov Pytest plugin for measuring coverage. <code>&gt;=6</code> <code>6.1.1</code> MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3</code> <code>3.16.0</code> MIT License pytest-xdist pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=3</code> <code>3.7.0</code> MIT python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License pytz World timezone definitions, modern and historical <code>&gt;=2025.1</code> <code>2025.2</code> MIT PyYAML YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.2</code> MIT pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>1.1</code> MIT readme_renderer readme_renderer is a library for rendering readme descriptions for Warehouse <code>&gt;=35.0</code> <code>44.0</code> Apache License, Version 2.0 requests Python HTTP for Humans. <code>~=2.26</code> <code>2.32.4</code> Apache-2.0 requests-toolbelt A utility belt for advanced users of python-requests <code>&gt;=0.8.0, !=0.9.0</code> <code>1.0.0</code> Apache 2.0 rfc3986 Validating URI References per RFC 3986 <code>&gt;=1.4.0</code> <code>2.0.0</code> Apache 2.0 rich Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=10.2.0</code> <code>14.0.0</code> MIT ruff An extremely fast Python linter and code formatter, written in Rust. <code>&gt;=0.11</code> <code>0.11.13</code> MIT SecretStorage Python bindings to FreeDesktop.org Secret Service API <code>&gt;=3.2</code> <code>3.3.3</code> BSD 3-Clause License semver Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.4</code> BSD License six Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.17.0</code> MIT smmap A pure Python implementation of a sliding window memory map manager <code>&gt;=3.0.1, &lt;6</code> <code>5.0.2</code> BSD-3-Clause twine Collection of utilities for publishing packages on PyPI <code>&gt;=5</code> <code>6.1.0</code> Apache Software License type-lens type-lens is a Python template project designed to simplify the setup of a new project. <code>&gt;=0.2.3</code> <code>0.2.3</code> MIT types-Markdown Typing stubs for Markdown <code>&gt;=3</code> <code>3.8.0.20250415</code> Apache-2.0 types-PyYAML Typing stubs for PyYAML <code>&gt;=6</code> <code>6.0.12.20250516</code> Apache-2.0 typing_extensions Backported and Experimental Type Hints for Python 3.9+ <code>&gt;=4.12.0</code> <code>4.14.0</code> PSF-2.0 urllib3 HTTP library with thread-safe connection pooling, file post, and more. <code>&gt;=1.21.1, &lt;3</code> <code>2.4.0</code> MIT watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>6.0.0</code> Apache-2.0 yore Manage legacy code with comments. <code>&gt;=0.4</code> <code>0.4.3</code> ISC"},{"location":"license/","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2025 GCS SeqOIA\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"usage/","title":"Sake Request","text":"<p><code>sake_request</code> is a python package that offers an API to help user to interogate sake.</p> <p>It's a wrapper around duckdb and thriller functions, so if sake_request doesn't meet your needs, feel free to draw inspiration from it.</p> <p>A Seqoia dAta laKE should look like this: <pre><code>sake\n|-- annotations\n|   |-- clinvar\n|   |-- \u2026\n|   |-- gnomad\n|   |-- snpeff\n|   `-- spliceai\n|-- preindication_A\n|   |-- genotypes\n|   |   |-- partitions\n|   |   |   |-- id_part=0\n|   |   |   |-- \u2026\n|   |   |   `-- id_part=255\n|   |   |-- samples\n|   |   |   |-- sample_1.parquet\n|   |   |   |-- \u2026\n|   |   |   `-- sample_Z.parquet\n|   |   `-- transmissions\n|   |       |-- sample_1.parquet\n|   |       |-- \u2026\n|   |       `-- sample_Z.parquet\n|   `-- variants\n|-- preindication_B\n|   |-- genotypes\n|   |   |-- partitions\n|   |   |   |-- id_part=0\n|   |   |   |-- \u2026\n|   |   |   `-- id_part=255\n|   |   |-- samples\n|   |   |   |-- sample_1.parquet\n|   |   |   |-- \u2026\n|   |   |   `-- sample_Z.parquet\n|   |   `-- transmissions\n|   |       |-- sample_1.parquet\n|   |       |-- \u2026\n|   |       `-- sample_Z.parquet\n|   `-- variants\n`-- samples\n   |-- patients.json\n   `-- patients.parquet\n</code></pre></p>"},{"location":"usage/#create-request-object","title":"Create request object","text":"<pre><code>import pathlib\nimport sake\n\nsake_path = pathlib.Path(\"/path/to/your/sake\")\n\nsake_db = sake.Sake(sake_path, \"preindication_1\")\n</code></pre> <p><code>sake_db</code> object store:</p> <ul> <li>path use for sake request</li> <li>on which preindication your request are run</li> <li>number of thread could be use, by default it's set to value return by <code>os.cpu_count()</code></li> <li>if you want activate tqdm or not, by default not</li> <li>an object <code>db</code> to store duckdb connection</li> </ul> <pre><code>sake_db = sake.Sake(\n    # mandatory argument\n    sake_path,\n    preindication,\n    # optional argument\n    threads=3,\n    activate_tqdm=True,\n    # overwrite annotations_path\n    annotations_path=\"my_annotations\"\n)\n</code></pre> <p>This <code>sake_db</code> object use 3 thread, activate tqdm progress bar, and annotations path are <code>sake_path / \"my_annotations\"</code> instead of default value.</p>"},{"location":"usage/#get-variants-from-a-genomic-region","title":"Get variants from a genomic region","text":"<pre><code>df = sake_db.get_interval(10, 329_034, 1_200_340)\n</code></pre> <p><code>df</code> is a polars.DataFrame you can make conversion to and from pandas with <code>to_pandas()</code> and <code>from_pandas()</code>. The result contains <code>chr</code>, <code>pos</code>, <code>ref</code> and <code>alt</code> column that are the minimum to define a variant and also a <code>id</code>, it's a sake almost unique variants id.</p> <p>If you have multiple region you could run this: <pre><code>target_chrs = [\"1\", \"2\", \"3\"]\ntarget_start = [10_000, 40_232, 80_000]\ntarget_stop = [199_232, 50_123, 800_000]\n\ndf = sake_db.get_intervals(\n    \"germline\",\n    target_chrs,\n    target_start,\n    target_stop\n)\n</code></pre></p> <p>You can see <code>get_intervals</code> as just a loop over <code>get_interval</code>.</p>"},{"location":"usage/#get-variants-from-prescription","title":"Get variants from prescription","text":"<pre><code>df = sake_db.get_variant_of_prescription(\"AAAA\")\n</code></pre> <p>DataFrame contains all variants(id, chr, pos, \u2026) and genotype (gt, ad, \u2026) information of prescription AAAA in germline dataset.</p>"},{"location":"usage/#get-variants-from-an-annotations","title":"Get variants from an annotations","text":"<pre><code>df = sake_db.get_annotations(\"clinvar\", \"20241103\")\n</code></pre> <p>DataFrame contains all variants(id, chr, pos, \u2026) and annotations information. By default columns are rename with annotations name as prefix, add <code>rename_column=False</code> in call to change this behavior. If you want just some column use <code>select_columns</code> parameter, use original name without prefix.</p>"},{"location":"usage/#add-variants-to-a-dataframe","title":"Add variants to a dataframe","text":"<p>Your dataframe must contains <code>id</code> column (see variants).</p> <pre><code>df = sake_db.add_variants(df)\n</code></pre> <p>Now <code>df</code> store variants imformation: - chr: chromosome name - pos: position of variant - ref: reference sequence - alt: alternative sequence</p>"},{"location":"usage/#add-genotypes-to-variants","title":"Add genotypes to variants","text":"<p>Your dataframe must contains <code>id</code> column (see variants).</p> <pre><code>df = sake_db.add_genotypes(df)\n</code></pre> <p>Now <code>df</code> store variants with sample information and genotyping:</p> <ul> <li>gt: number of 1 in GT column in vcf, phasing and . information are lose</li> <li>ad: string that stop AD column in vcf</li> <li>db: DP column in vcf</li> <li>gq: GQ column in vcf</li> </ul> <pre><code>df = sake_db.add_genotypes(df, select_columns=[\"gt\"])\n</code></pre> <p>This df store only <code>sample</code> and <code>gt</code> column.</p>"},{"location":"usage/#other-parameter","title":"Other parameter","text":"<p>To add genotypes information sake_request add a column call <code>id_part</code> it's indicate in which genome block genotypes of variants are store. By default this column are drop if you want keep it set <code>keep_id_part</code> to True.</p> <p>In sake structure example number of <code>id_part</code> are between 0 to 255 (\\(2^8 - 1\\)), but you could use more or less partition (check variantplaner doc). Number of partitions is a power of 2, <code>number_of_bits</code> parameter let you indicate how many partitions is use, default value are 8 \\(2^8 - 1\\) are 255.</p> <p>You could say to <code>add_genotypes</code> to read many partitions file in same time, with <code>read_threads</code> parameter.</p> <pre><code>df = sake_db.add_genotypes(\n    df,\n    keep_id_part: bool = False,\n    drop_column: list[str] | None = None,\n    number_of_bits: int = 8,\n    read_threads: int = 1,\n)\n</code></pre>"},{"location":"usage/#add-annotations","title":"Add annotations","text":"<pre><code>df = sake_db.add_annotations(df, \"gnomad\", \"3.1.2\")\n</code></pre> <p>By default all column in annotation are prefixed by annotation name. It's likely that not all columns are of interest to you, use parameter <code>select_columns</code> to list columns of interest. Use original name not with prefix.</p> <pre><code>df = sake_db.add_annotations(\n    df,\n    \"gnomad\",\n    \"genomes.4.1\",\n    rename_column=False,\n    select_columns=[\"AC\"]\n)\n</code></pre> <p>This call add to <code>df</code> a column AC from the gnomad annotations.</p>"},{"location":"usage/#special-case","title":"Special case","text":"<p>Due to some specificity in annotations database some change are made automaticly on parameter:</p> <ul> <li>if database_name is <code>snpeff</code> or <code>variant2gene</code>, preindication is add after version value</li> <li>if database_name is <code>spliceai</code>, version value are ignore</li> </ul> <p>In fact <code>add_annotations</code> method just concat <code>sake</code> path, <code>database_name</code> and <code>database_version</code>. So to add annotations just check path like <code>{sake.path}/{database_name}/{database_version}</code> contains parquet file for each chromosome.</p>"},{"location":"usage/#add-sample-information","title":"Add sample information","text":"<p>Your data frame must contains <code>sample</code> column (see genotypes)</p> <pre><code>df = sake_db.sample_info(df)\n</code></pre> <p>You can select which column you want add in your dataframe</p> <pre><code>df = sake_db.sample_info(df, select_columns=[\"pid_crc\"])\n</code></pre> <p>Result only contains new <code>pid_crc</code> column.</p>"},{"location":"usage/#add-transmission-information","title":"Add transmission information","text":"<p>Transmission information are available only for germline information and for kindex sample. Your dataset must contains <code>pid_crc</code> column (see sample information)</p> <pre><code>index_transmission = sake_db.add_transmissions(df)\n</code></pre> <p>Result contains only variant of kindex sample with genotype column for index sample, father and mother with coresponding prefix and an origin column. More details in how origin column are build in variantplaner documentation.</p> <pre><code>index_transmission = sake_db.add_transmissions(\n    df,\n    drop_column=[\"mother_gq\"]\n)\n</code></pre> <p>This df store not store <code>mother_gq</code> column if you didn't need a column add it in drop_column.</p> <p>You could say to <code>add_transmissions</code> to read many partitions file in same time, with <code>read_threads</code> parameter.</p> <pre><code>add_transmissions(\n    df,\n    drop_column: list[str] | None = None,\n    read_threads: int = 1,\n) -&gt; DataFrame\n</code></pre>"},{"location":"reference/api/","title":"API reference","text":""},{"location":"reference/api/#sake","title":"sake","text":"<p>Sake Request package.</p> <p>A set of utils tools to interogate Seqoia dAta laKE</p> <p>Modules:</p> <ul> <li> <code>duckdb_query</code>           \u2013            <p>A map that associate query name to duckdb sql query.</p> </li> <li> <code>obj</code>           \u2013            <p>Define Sake dataclass, main API of sake_request.</p> </li> <li> <code>utils</code>           \u2013            <p>Some utils function.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>Sake</code>           \u2013            <p>Class that help user to extract variants from sake.</p> </li> </ul>"},{"location":"reference/api/#sake.Sake","title":"Sake  <code>dataclass</code>","text":"<pre><code>Sake(\n    *,\n    sake_path: Path,\n    preindication: str,\n    threads: int | None = cpu_count(),\n    activate_tqdm: bool | None = False,\n    aggregations_path: Path | None = None,\n    annotations_path: Path | None = None,\n    cnv_path: Path | None = None,\n    partitions_path: Path | None = None,\n    prescriptions_path: Path | None = None,\n    samples_path: Path | None = None,\n    str_path: Path | None = None,\n    transmissions_path: Path | None = None,\n    variants_path: Path | None = None,\n    genotype_columns: list[str] | None = None,\n)\n</code></pre> <p>Class that help user to extract variants from sake.</p> <p>Methods:</p> <ul> <li> <code>add_annotations</code>             \u2013              <p>Add annotations to variants.</p> </li> <li> <code>add_genotypes</code>             \u2013              <p>Add genotype information to variants DataFrame.</p> </li> <li> <code>add_sample_info</code>             \u2013              <p>Add sample information.</p> </li> <li> <code>add_transmissions</code>             \u2013              <p>Add transmissions information.</p> </li> <li> <code>add_variants</code>             \u2013              <p>Use id of column polars.DataFrame to get variant information.</p> </li> <li> <code>all_variants</code>             \u2013              <p>Get all variants of a target in present in Sake.</p> </li> <li> <code>get_annotations</code>             \u2013              <p>Get all variants of an annotations.</p> </li> <li> <code>get_cnv</code>             \u2013              <p>Get cnv from chromosome between start and stop.</p> </li> <li> <code>get_cnv_by_sample</code>             \u2013              <p>Get cnv by sample.</p> </li> <li> <code>get_interval</code>             \u2013              <p>Get variants from chromosome between start and stop.</p> </li> <li> <code>get_intervals</code>             \u2013              <p>Get variants in multiple intervals.</p> </li> <li> <code>get_variant_of_prescription</code>             \u2013              <p>Get all variants of a prescription.</p> </li> <li> <code>get_variant_of_prescriptions</code>             \u2013              <p>Get all variants of multiple prescriptions.</p> </li> </ul>"},{"location":"reference/api/#sake.Sake.add_annotations","title":"add_annotations","text":"<pre><code>add_annotations(\n    variants: DataFrame,\n    name: str,\n    version: str,\n    *,\n    rename_column: bool = True,\n    select_columns: list[str] | None = None,\n    read_threads: int = 1,\n    chrom_basename: str | None = None,\n) -&gt; DataFrame\n</code></pre> <p>Add annotations to variants.</p> <p>Require <code>id</code> column in variants value.</p> <p>Parameters:</p> <ul> <li> <code>variants</code>               (<code>DataFrame</code>)           \u2013            <p>DataFrame you wish to annotate</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Name of annotations you want add to your variants</p> </li> <li> <code>version</code>               (<code>str</code>)           \u2013            <p>version of annotations you want add to your variants</p> </li> <li> <code>rename_column</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>prefix annotations column name with annotations name</p> </li> <li> <code>select_columns</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>name of annotations column (same as is in annotations file) you want add to your DataFrame, if None all column are added</p> </li> <li> <code>chrom_basename</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>basename of annotation filename use to detect format annotation file directory struct. If value is not set, function try to detect it automagicly.</p> </li> </ul> Return <p>DataFrame with annotations column.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def add_annotations(\n    self,\n    variants: polars.DataFrame,\n    name: str,\n    version: str,\n    *,\n    rename_column: bool = True,\n    select_columns: list[str] | None = None,\n    read_threads: int = 1,\n    chrom_basename: str | None = None,\n) -&gt; polars.DataFrame:\n    \"\"\"Add annotations to variants.\n\n    Require `id` column in variants value.\n\n    Parameters:\n      variants: DataFrame you wish to annotate\n      name: Name of annotations you want add to your variants\n      version: version of annotations you want add to your variants\n      rename_column: prefix annotations column name with annotations name\n      select_columns: name of annotations column (same as is in annotations file) you want add to your DataFrame, if None all column are added\n      chrom_basename: basename of annotation filename use to detect format annotation file directory struct. If value is not set, function try to detect it automagicly.\n\n    Return:\n      DataFrame with annotations column.\n    \"\"\"\n    if chrom_basename is None:\n        # chrom_basename Not set so we try found it\n        # chromosome column is present get first value or try default value\n        chrom_basename = str(variants.get_column(\"chr\").first()) if \"chr\" in variants.schema else \"1\"\n\n    annotation_path_result = sake._utils.fix_annotation_path(\n        self.annotations_path,  # type: ignore[arg-type]\n        name,\n        version,\n        self.preindication,\n        chrom_basename=chrom_basename,\n    )\n    if annotation_path_result is not None:\n        (annotation_path, split_by_chr) = annotation_path_result\n    else:\n        # No annotations path return input\n        return variants\n\n    schema = polars.read_parquet_schema(annotation_path)\n    if \"id\" in schema:\n        del schema[\"id\"]\n    columns = \",\".join([f\"a.{col}\" for col in schema if select_columns is None or col in select_columns])\n\n    if split_by_chr:\n        iterator = sake._utils.wrap_iterator(\n            self.activate_tqdm,  # type: ignore[arg-type]\n            variants.group_by([\"chr\"]),\n            total=variants.get_column(\"chr\").unique().len(),\n        )\n        annotation_path = annotation_path.parent\n\n        query_obj = sake._utils.QueryByGroupBy(\n            self.threads // read_threads,  # type: ignore[operator]\n            f\"{annotation_path}/{{}}.parquet\",\n            \"add_annotations\",\n            {\"columns\": columns},\n            select_columns,\n        )\n        if read_threads == 1:\n            all_annotations = list(map(query_obj, iterator))\n        else:\n            with multiprocessing.get_context(\"spawn\").Pool(processes=read_threads) as pool:\n                all_annotations = list(pool.imap(query_obj, iterator))\n\n        result = polars.concat([df for df in all_annotations if df is not None])\n    else:\n        query_str = sake.QUERY[\"add_annotations\"].format(columns=columns)\n\n        result = self.db.execute(\n            query_str,\n            {\n                \"path\": annotation_path,\n            },\n        ).pl()\n\n    if rename_column:\n        result = result.rename(\n            {col: f\"{name}_{col}\" for col in schema if select_columns is None or col in select_columns},\n        )\n\n    return result\n</code></pre>"},{"location":"reference/api/#sake.Sake.add_genotypes","title":"add_genotypes","text":"<pre><code>add_genotypes(\n    variants: DataFrame,\n    *,\n    keep_id_part: bool = False,\n    select_columns: list[str] | None = None,\n    number_of_bits: int = 8,\n    read_threads: int = 1,\n) -&gt; DataFrame\n</code></pre> <p>Add genotype information to variants DataFrame.</p> <p>Require <code>id</code> column in variants value.</p> <p>Parameters:</p> <ul> <li> <code>variants</code>               (<code>DataFrame</code>)           \u2013            <p>DataFrame you wish to add genotypes</p> </li> <li> <code>keep_id_part</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>method add id_part column, set to True to keep_it</p> </li> <li> <code>select_columns</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>name of genotype column you want add to your DataFrame, if None all column are added</p> </li> <li> <code>number_of_bits</code>               (<code>int</code>, default:                   <code>8</code> )           \u2013            <p>number of bits use to compute partitions</p> </li> <li> <code>read_threads</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>number of partitions file read in parallel</p> </li> </ul> Return <p>DataFrame with genotype information.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def add_genotypes(\n    self,\n    variants: polars.DataFrame,\n    *,\n    keep_id_part: bool = False,\n    select_columns: list[str] | None = None,\n    number_of_bits: int = 8,\n    read_threads: int = 1,\n) -&gt; polars.DataFrame:\n    \"\"\"Add genotype information to variants DataFrame.\n\n    Require `id` column in variants value.\n\n    Parameters:\n      variants: DataFrame you wish to add genotypes\n      keep_id_part: method add id_part column, set to True to keep_it\n      select_columns: name of genotype column you want add to your DataFrame, if None all column are added\n      number_of_bits: number of bits use to compute partitions\n      read_threads: number of partitions file read in parallel\n\n    Return:\n      DataFrame with genotype information.\n    \"\"\"\n    if select_columns is None:\n        select_columns = [\n            *variants.schema.names(),\n            \"sample\",\n            *self.genotype_columns,  # type: ignore[misc]\n        ]\n    else:\n        select_columns = [*variants.schema.names(), \"sample\", *select_columns]\n\n    variants = sake.utils.add_id_part(variants, number_of_bits=number_of_bits)\n\n    if keep_id_part:\n        select_columns.append(\"id_part\")\n\n    all_genotypes: list[polars.DataFrame | None] = []\n    iterator = sake._utils.wrap_iterator(\n        self.activate_tqdm,  # type: ignore[arg-type]\n        variants.group_by([\"id_part\"]),\n        total=variants.get_column(\"id_part\").unique().len(),\n    )\n\n    query = sake._utils.QueryByGroupBy(\n        self.threads // read_threads,  # type: ignore[operator]\n        f\"{self.partitions_path}/id_part={{}}/0.parquet\",\n        \"genotype_query\",\n        select_columns=select_columns,\n        expressions=[\n            polars.col(\"ad\").cast(polars.List(polars.String)).list.join(\",\").alias(\"ad\"),\n        ],\n    )\n\n    if read_threads == 1:\n        all_genotypes = list(map(query, iterator))\n    else:\n        with multiprocessing.get_context(\"spawn\").Pool(processes=read_threads) as pool:\n            all_genotypes = list(pool.imap(query, iterator))\n\n    return polars.concat([df for df in all_genotypes if df is not None])\n</code></pre>"},{"location":"reference/api/#sake.Sake.add_sample_info","title":"add_sample_info","text":"<pre><code>add_sample_info(\n    _variants: DataFrame,\n    *,\n    select_columns: list[str] | None = None,\n) -&gt; DataFrame\n</code></pre> <p>Add sample information.</p> <p>Required sample column in polars.DataFrame.</p> <p>Parameters:</p> <ul> <li> <code>_variants</code>               (<code>DataFrame</code>)           \u2013            <p>DataFrame you wish to add sample information</p> </li> <li> <code>select_columns</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>name of sample information column you want add to your DataFrame, if None all column are added</p> </li> </ul> Return <p>DataFrame with sample information.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def add_sample_info(\n    self,\n    _variants: polars.DataFrame,\n    *,\n    select_columns: list[str] | None = None,\n) -&gt; polars.DataFrame:\n    \"\"\"Add sample information.\n\n    Required sample column in polars.DataFrame.\n\n    Parameters:\n      _variants: DataFrame you wish to add sample information\n      select_columns: name of sample information column you want add to your DataFrame, if None all column are added\n\n    Return:\n      DataFrame with sample information.\n    \"\"\"\n    # sampless_path are set in __post_init__\n    schema = polars.read_parquet_schema(self.samples_path)  # type: ignore[arg-type]\n\n    if select_columns is None:\n        select_columns = [col for col in schema if col != \"sample\"]\n\n    columns = \",\".join([f\"s.{col}\" for col in schema if col in select_columns])\n\n    query = sake.QUERY[\"add_sample_info\"].format(columns=columns)\n\n    return self.db.execute(\n        query,\n        {\n            \"path\": str(self.samples_path),\n        },\n    ).pl()\n</code></pre>"},{"location":"reference/api/#sake.Sake.add_transmissions","title":"add_transmissions","text":"<pre><code>add_transmissions(\n    variants: DataFrame,\n    *,\n    select_columns: list[str] | None = None,\n    read_threads: int = 1,\n) -&gt; DataFrame\n</code></pre> <p>Add transmissions information.</p> <p>Required pid_crc column in polars.DataFrame.</p> <p>Parameters:</p> <ul> <li> <code>variants</code>               (<code>DataFrame</code>)           \u2013            <p>DataFrame you wish to add genotypes</p> </li> <li> <code>select_columns</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>name of transmissions column you want add to your DataFrame, if None all column are added</p> </li> <li> <code>read_threads</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>number of partitions file read in parallel</p> </li> </ul> Return <p>DataFrame with genotype information.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def add_transmissions(\n    self,\n    variants: polars.DataFrame,\n    *,\n    select_columns: list[str] | None = None,\n    read_threads: int = 1,\n) -&gt; polars.DataFrame:\n    \"\"\"Add transmissions information.\n\n    Required pid_crc column in polars.DataFrame.\n\n\n    Parameters:\n      variants: DataFrame you wish to add genotypes\n      select_columns: name of transmissions column you want add to your DataFrame, if None all column are added\n      read_threads: number of partitions file read in parallel\n\n    Return:\n      DataFrame with genotype information.\n    \"\"\"\n    if select_columns is None:\n        select_columns = list(variants.schema)\n        select_columns += [\n            f\"{prefix}_{suffix}\"\n            for suffix in self.genotype_columns  # type: ignore[union-attr]\n            for prefix in [\"index\", \"father\", \"mother\"]\n        ]\n        select_columns += [\"origin\"]\n    else:\n        select_columns = [*variants.schema.names(), *select_columns, \"origin\"]\n\n    all_transmissions = []\n    iterator = sake._utils.wrap_iterator(\n        self.activate_tqdm,  # type: ignore[arg-type]\n        variants.group_by([\"pid_crc\"]),\n        total=variants.get_column(\"pid_crc\").unique().len(),\n    )\n    query = sake._utils.QueryByGroupBy(\n        self.threads // read_threads,  # type: ignore[operator]\n        f\"{self.transmissions_path}/{{}}.parquet\",\n        \"add_transmissions\",\n        select_columns=select_columns,\n        expressions=[\n            polars.col(\"father_gt\").cast(polars.UInt8).alias(\"father_gt\"),\n            polars.col(\"index_gt\").cast(polars.UInt8).alias(\"index_gt\"),\n            polars.col(\"mother_gt\").cast(polars.UInt8).alias(\"mother_gt\"),\n            polars.col(\"father_dp\").cast(polars.UInt32).alias(\"father_dp\"),\n            polars.col(\"index_dp\").cast(polars.UInt32).alias(\"index_dp\"),\n            polars.col(\"mother_dp\").cast(polars.UInt32).alias(\"mother_dp\"),\n            polars.col(\"father_gq\").cast(polars.UInt32).alias(\"father_gq\"),\n            polars.col(\"index_gq\").cast(polars.UInt32).alias(\"index_gq\"),\n            polars.col(\"mother_gq\").cast(polars.UInt32).alias(\"mother_gq\"),\n            polars.col(\"father_ad\").cast(polars.List(polars.String)).list.join(\",\").alias(\"father_ad\"),\n            polars.col(\"index_ad\").cast(polars.List(polars.String)).list.join(\",\").alias(\"index_ad\"),\n            polars.col(\"mother_ad\").cast(polars.List(polars.String)).list.join(\",\").alias(\"mother_ad\"),\n        ],\n    )\n\n    if read_threads == 1:\n        all_transmissions = list(map(query, iterator))\n    else:\n        with multiprocessing.get_context(\"spawn\").Pool(processes=read_threads) as pool:\n            all_transmissions = list(pool.imap(query, iterator))\n\n    return polars.concat([df for df in all_transmissions if df is not None])\n</code></pre>"},{"location":"reference/api/#sake.Sake.add_variants","title":"add_variants","text":"<pre><code>add_variants(_data: DataFrame) -&gt; DataFrame\n</code></pre> <p>Use id of column polars.DataFrame to get variant information.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def add_variants(self, _data: polars.DataFrame) -&gt; polars.DataFrame:\n    \"\"\"Use id of column polars.DataFrame to get variant information.\"\"\"\n    return self.__add_all_variants(\"add_variants\", _data)\n</code></pre>"},{"location":"reference/api/#sake.Sake.all_variants","title":"all_variants","text":"<pre><code>all_variants() -&gt; DataFrame\n</code></pre> <p>Get all variants of a target in present in Sake.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def all_variants(self) -&gt; polars.DataFrame:\n    \"\"\"Get all variants of a target in present in Sake.\"\"\"\n    return self.__add_all_variants(\"all_variants\")\n</code></pre>"},{"location":"reference/api/#sake.Sake.get_annotations","title":"get_annotations","text":"<pre><code>get_annotations(\n    name: str,\n    version: str,\n    *,\n    rename_column: bool = True,\n    select_columns: list[str] | None = None,\n) -&gt; DataFrame | None\n</code></pre> <p>Get all variants of an annotations.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Name of annotations you want add to your variants</p> </li> <li> <code>version</code>               (<code>str</code>)           \u2013            <p>version of annotations you want add to your variants</p> </li> <li> <code>rename_column</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>prefix annotations column name with annotations name</p> </li> <li> <code>select_columns</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>name of annotations column (same as is in annotations file) you want add to your DataFrame, if None all column are added</p> </li> </ul> Return <p>DataFrame with annotations column.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def get_annotations(\n    self,\n    name: str,\n    version: str,\n    *,\n    rename_column: bool = True,\n    select_columns: list[str] | None = None,\n) -&gt; polars.DataFrame | None:\n    \"\"\"Get all variants of an annotations.\n\n    Parameters:\n      name: Name of annotations you want add to your variants\n      version: version of annotations you want add to your variants\n      rename_column: prefix annotations column name with annotations name\n      select_columns: name of annotations column (same as is in annotations file) you want add to your DataFrame, if None all column are added\n\n    Return:\n      DataFrame with annotations column.\n    \"\"\"\n    annotation_path_result = sake._utils.fix_annotation_path(\n        self.annotations_path,  # type: ignore[arg-type]\n        name,\n        version,\n        self.preindication,\n    )\n    if annotation_path_result is not None:\n        (annotation_path, split_by_chr) = annotation_path_result\n    else:\n        # No annotations path return input\n        return None\n\n    schema = polars.read_parquet_schema(annotation_path)\n    if \"id\" in schema:\n        del schema[\"id\"]\n    columns = \",\".join([f\"a.{col}\" for col in schema if select_columns is None or col in select_columns])\n\n    query = sake.QUERY[\"get_annotations\"].format(columns=columns)\n    if split_by_chr:\n        annotations_path = sake._utils.get_chromosome_path(annotation_path.parent)\n        variants_path = sake._utils.get_chromosome_path(self.variants_path)  # type: ignore[arg-type]\n        iterator = sake._utils.wrap_iterator(\n            self.activate_tqdm,  # type: ignore[arg-type]\n            zip(annotations_path, variants_path),\n        )\n\n        all_annotations = []\n        for annotation_path, variant_path in iterator:\n            chrom_result = self.db.execute(\n                query,\n                {\n                    \"annotation_path\": str(annotation_path),\n                    \"variant_path\": str(variant_path),\n                },\n            ).pl()\n\n            all_annotations.append(chrom_result)\n\n        result = polars.concat([df for df in all_annotations if df is not None])\n    else:\n        result = self.db.execute(\n            query,\n            {\n                \"annotation_path\": annotation_path,\n                \"variant_path\": f\"{self.variants_path}/*.parquet\",\n            },\n        ).pl()\n\n    if rename_column:\n        result = result.rename(\n            {col: f\"{name}_{col}\" for col in schema if select_columns is None or col in select_columns},\n        )\n\n    return result\n</code></pre>"},{"location":"reference/api/#sake.Sake.get_cnv","title":"get_cnv","text":"<pre><code>get_cnv(\n    chrom: str,\n    start: int,\n    stop: int,\n    tools: str,\n    sv_type: str,\n    *,\n    exact: bool = True,\n) -&gt; DataFrame\n</code></pre> <p>Get cnv from chromosome between start and stop.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def get_cnv(\n    self,\n    chrom: str,\n    start: int,\n    stop: int,\n    tools: str,\n    sv_type: str,\n    *,\n    exact: bool = True,\n) -&gt; polars.DataFrame:\n    \"\"\"Get cnv from chromosome between start and stop.\"\"\"\n    start_comp = \"==\" if exact else \"&gt;\"\n    stop_comp = \"==\" if exact else \"&lt;\"\n\n    return self.db.execute(\n        sake.QUERY[\"get_cnv\"].format(start_comp=start_comp, stop_comp=stop_comp),\n        {\n            \"path\": str(self.cnv_path / \"groupby\" / tools / sv_type / f\"{chrom}.parquet\"),  # type: ignore[operator]\n            \"start\": start,\n            \"stop\": stop,\n        },\n    ).pl()\n</code></pre>"},{"location":"reference/api/#sake.Sake.get_cnv_by_sample","title":"get_cnv_by_sample","text":"<pre><code>get_cnv_by_sample(sample: str, tools: str) -&gt; DataFrame\n</code></pre> <p>Get cnv by sample.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def get_cnv_by_sample(self, sample: str, tools: str) -&gt; polars.DataFrame:\n    \"\"\"Get cnv by sample.\"\"\"\n    return polars.read_parquet(self.cnv_path / \"samples\" / sample / f\"{tools}.parquet\")  # type: ignore[operator]\n</code></pre>"},{"location":"reference/api/#sake.Sake.get_interval","title":"get_interval","text":"<pre><code>get_interval(\n    chrom: str,\n    start: int,\n    stop: int,\n    comment: IntoExpr | None = None,\n) -&gt; DataFrame\n</code></pre> <p>Get variants from chromosome between start and stop.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def get_interval(\n    self,\n    chrom: str,\n    start: int,\n    stop: int,\n    comment: polars.typing.IntoExpr | None = None,\n) -&gt; polars.DataFrame:\n    \"\"\"Get variants from chromosome between start and stop.\"\"\"\n    df = self.db.execute(\n        sake.QUERY[\"get_interval\"],\n        {\n            \"path\": str(self.variants_path / f\"{chrom}.parquet\"),  # type: ignore[operator]\n            \"chrom\": chrom,\n            \"start\": start,\n            \"stop\": stop,\n        },\n    ).pl()\n\n    if comment is None:\n        return df\n    return df.with_columns(comment)\n</code></pre>"},{"location":"reference/api/#sake.Sake.get_intervals","title":"get_intervals","text":"<pre><code>get_intervals(\n    chroms: list[str],\n    starts: list[int],\n    stops: list[int],\n    comments: list[IntoExpr] | None = None,\n) -&gt; DataFrame\n</code></pre> <p>Get variants in multiple intervals.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def get_intervals(\n    self,\n    chroms: list[str],\n    starts: list[int],\n    stops: list[int],\n    comments: list[polars.typing.IntoExpr] | None = None,\n) -&gt; polars.DataFrame:\n    \"\"\"Get variants in multiple intervals.\"\"\"\n    all_variants = []\n    minimal_length = min(len(chroms), len(starts), len(stops))\n    if comments is None:\n        iterator = sake._utils.wrap_iterator(\n            self.activate_tqdm,  # type: ignore[arg-type]\n            zip(chroms, zip(starts, stops)),\n            total=minimal_length,\n        )\n    else:\n        iterator = sake._utils.wrap_iterator(\n            self.activate_tqdm,  # type: ignore[arg-type]\n            zip(chroms, zip(starts, zip(stops, comments))),\n            total=minimal_length,\n        )\n\n    for multi_value in iterator:\n        tmp = list(\n            sake._utils.flatten_tuples(multi_value),\n        )\n        chrom, start, stop, *comment = tmp\n        all_variants.append(\n            self.get_interval(chrom, start, stop, comment),\n        )\n\n    return polars.concat(all_variants)\n</code></pre>"},{"location":"reference/api/#sake.Sake.get_variant_of_prescription","title":"get_variant_of_prescription","text":"<pre><code>get_variant_of_prescription(prescription: str) -&gt; DataFrame\n</code></pre> <p>Get all variants of a prescription.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def get_variant_of_prescription(self, prescription: str) -&gt; polars.DataFrame:\n    \"\"\"Get all variants of a prescription.\"\"\"\n    return self.db.execute(\n        sake.QUERY[\"get_variant_of_prescription\"],\n        {\n            \"sample_path\": str(\n                self.prescriptions_path / f\"{prescription}.parquet\",  # type: ignore[operator]\n            ),\n            \"variant_path\": f\"{self.variants_path}/*.parquet\",\n        },\n    ).pl()\n</code></pre>"},{"location":"reference/api/#sake.Sake.get_variant_of_prescriptions","title":"get_variant_of_prescriptions","text":"<pre><code>get_variant_of_prescriptions(\n    prescriptions: list[str],\n) -&gt; DataFrame\n</code></pre> <p>Get all variants of multiple prescriptions.</p> Source code in <code>src/sake/obj.py</code> <pre><code>def get_variant_of_prescriptions(self, prescriptions: list[str]) -&gt; polars.DataFrame:\n    \"\"\"Get all variants of multiple prescriptions.\"\"\"\n    iterator = sake._utils.wrap_iterator(self.activate_tqdm, prescriptions)  # type: ignore[arg-type]\n\n    all_variants = []\n    for pid in iterator:\n        all_variants.append(\n            self.db.execute(\n                sake.QUERY[\"get_variant_of_prescription\"],\n                {\n                    \"sample_path\": str(self.prescriptions_path / f\"{pid}.parquet\"),  # type: ignore[operator]\n                    \"variant_path\": f\"{self.variants_path}/*.parquet\",\n                },\n            ).pl(),\n        )\n\n    return polars.concat(all_variants)\n</code></pre>"},{"location":"reference/api/#sake.utils","title":"utils","text":"<p>Some utils function.</p> <p>Functions:</p> <ul> <li> <code>add_id_part</code>             \u2013              <p>Compute and add id_part of polars.DataFrame.</p> </li> <li> <code>add_recurrence</code>             \u2013              <p>Compute recurrence of variant.</p> </li> <li> <code>get_list</code>             \u2013              <p>Replace list by value at index or null_value if index is out of bound.</p> </li> <li> <code>list2string</code>             \u2013              <p>Convert list in string.</p> </li> </ul>"},{"location":"reference/api/#sake.utils.add_id_part","title":"add_id_part","text":"<pre><code>add_id_part(\n    data: DataFrame, number_of_bits: int = 8\n) -&gt; DataFrame\n</code></pre> <p>Compute and add id_part of polars.DataFrame.</p> Source code in <code>src/sake/utils.py</code> <pre><code>def add_id_part(data: polars.DataFrame, number_of_bits: int = 8) -&gt; polars.DataFrame:\n    \"\"\"Compute and add id_part of polars.DataFrame.\"\"\"\n    # it's look like dark magic but it's just bit shift without bit shift operator\n    return data.with_columns(\n        id_part=polars.when(polars.col(\"id\") // pow(2, 63) == 1)\n        .then(\n            pow(2, number_of_bits) - 1,\n        )\n        .otherwise(\n            polars.col(\"id\") * 2 // pow(2, 64 - number_of_bits),\n        ),\n    )\n</code></pre>"},{"location":"reference/api/#sake.utils.add_recurrence","title":"add_recurrence","text":"<pre><code>add_recurrence(data: DataFrame) -&gt; DataFrame\n</code></pre> <p>Compute recurrence of variant.</p> <p>Requirement: - id: variant id - gt: genotype</p> Source code in <code>src/sake/utils.py</code> <pre><code>def add_recurrence(data: polars.DataFrame) -&gt; polars.DataFrame:\n    \"\"\"Compute recurrence of variant.\n\n    Requirement:\n    - id: variant id\n    - gt: genotype\n    \"\"\"\n    recurrence = data.group_by(\"id\").agg(\n        sake_AC=polars.sum(\"gt\"),\n        sake_nhomalt=(polars.col(\"gt\") - 1).sum(),\n    )\n\n    return data.join(recurrence, on=\"id\", how=\"left\")\n</code></pre>"},{"location":"reference/api/#sake.utils.get_list","title":"get_list","text":"<pre><code>get_list(\n    data: DataFrame,\n    *,\n    columns: list[str],\n    index: int = 0,\n    null_value: Any = 0,\n) -&gt; DataFrame\n</code></pre> <p>Replace list by value at index or null_value if index is out of bound.</p> Source code in <code>src/sake/utils.py</code> <pre><code>def get_list(\n    data: polars.DataFrame,\n    *,\n    columns: list[str],\n    index: int = 0,\n    null_value: typing.Any = 0,\n) -&gt; polars.DataFrame:\n    \"\"\"Replace list by value at index or null_value if index is out of bound.\"\"\"\n    return data.with_columns(\n        [polars.col(name).list.get(index, null_on_oob=True).fill_null(null_value).alias(name) for name in columns],\n    )\n</code></pre>"},{"location":"reference/api/#sake.utils.list2string","title":"list2string","text":"<pre><code>list2string(\n    data: DataFrame,\n    *,\n    columns: list[str],\n    separator: str = \",\",\n) -&gt; DataFrame\n</code></pre> <p>Convert list in string.</p> Source code in <code>src/sake/utils.py</code> <pre><code>def list2string(data: polars.DataFrame, *, columns: list[str], separator: str = \",\") -&gt; polars.DataFrame:\n    \"\"\"Convert list in string.\"\"\"\n    return data.with_columns(\n        [polars.col(name).cast(polars.List(polars.String)).list.join(separator).alias(name) for name in columns],\n    )\n</code></pre>"},{"location":"coverage/","title":"Coverage report","text":""}]}